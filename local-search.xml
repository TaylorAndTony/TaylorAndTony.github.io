<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>查看 linux 软件是通过什么方式安装的</title>
    <link href="/2025/03/12/linux-%E8%BD%AF%E4%BB%B6%E6%98%AF%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85%E7%9A%84/"/>
    <url>/2025/03/12/linux-%E8%BD%AF%E4%BB%B6%E6%98%AF%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<h1 id="查看-linux-软件是通过什么方式安装的"><a href="#查看-linux-软件是通过什么方式安装的" class="headerlink" title="查看 linux 软件是通过什么方式安装的"></a>查看 linux 软件是通过什么方式安装的</h1><p>ubuntu系统上有qBittorrent，但安装时间过于久远，忘记了是怎么安装的了。</p><h3 id="1-使用-dpkg-检查"><a href="#1-使用-dpkg-检查" class="headerlink" title="1. 使用 dpkg 检查"></a>1. 使用 <code>dpkg</code> 检查</h3><p><code>dpkg</code> 是管理 <code>.deb</code> 包的工具，可以查看软件是否通过 <code>apt</code> 安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -l | grep qbittorrent<br></code></pre></td></tr></table></figure><p>如果输出类似 <code>ii qbittorrent 4.3.9-1</code>，说明是通过 <code>apt</code> 安装的。</p><h3 id="2-使用-apt-检查"><a href="#2-使用-apt-检查" class="headerlink" title="2. 使用 apt 检查"></a>2. 使用 <code>apt</code> 检查</h3><p><code>apt</code> 也可以查询软件包的安装状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt list --installed | grep qbittorrent<br></code></pre></td></tr></table></figure><p>如果输出类似 <code>qbittorrent/now 4.3.9-1 amd64 [installed]</code>，说明是通过 <code>apt</code> 安装的。</p><h3 id="3-检查安装来源"><a href="#3-检查安装来源" class="headerlink" title="3. 检查安装来源"></a>3. 检查安装来源</h3><p>使用 <code>apt</code> 查看软件包的来源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-cache policy qbittorrent<br></code></pre></td></tr></table></figure><p>输出中的 <code>Installed</code> 行会显示安装版本和来源，如果显示官方仓库的版本号，说明是通过 <code>apt</code> 安装的。</p><h3 id="4-检查可执行文件路径"><a href="#4-检查可执行文件路径" class="headerlink" title="4. 检查可执行文件路径"></a>4. 检查可执行文件路径</h3><p>查看 <code>qBittorrent</code> 的安装路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> qbittorrent<br></code></pre></td></tr></table></figure><p>如果路径是 <code>/usr/bin/qbittorrent</code>，通常是通过 <code>apt</code> 安装的。</p><h3 id="5-检查软件包管理器日志"><a href="#5-检查软件包管理器日志" class="headerlink" title="5. 检查软件包管理器日志"></a>5. 检查软件包管理器日志</h3><p>查看 <code>apt</code> 的日志文件 <code>/var/log/apt/history.log</code>，搜索 <code>qbittorrent</code> 的安装记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep qbittorrent /var/log/apt/history.log<br></code></pre></td></tr></table></figure><p>如果找到相关记录，说明是通过 <code>apt</code> 安装的。</p><blockquote><p>linux-软件是通过什么方式安装的.md</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>qbittorrent</tag>
      
      <tag>troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/12/csharp-detect-image-ratio/"/>
    <url>/2025/03/12/csharp-detect-image-ratio/</url>
    
    <content type="html"><![CDATA[<h1 id="C-检测图片比例遇到长宽颠倒（C-读取图片被旋转）"><a href="#C-检测图片比例遇到长宽颠倒（C-读取图片被旋转）" class="headerlink" title="C#检测图片比例遇到长宽颠倒（C#读取图片被旋转）"></a>C#检测图片比例遇到长宽颠倒（C#读取图片被旋转）</h1><p>原本使用如下代码检查图片比例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> ImageSize<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Width;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Height;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ImageSize</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> w, <span class="hljs-built_in">int</span> h</span>)</span><br>    &#123;<br>        Width = w;<br>        Height = h;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImageSize <span class="hljs-title">GetImageSize</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> img</span>)</span><br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        System.Drawing.Image image = System.Drawing.Image.FromFile(img);<br>        ImageSize size = <span class="hljs-keyword">new</span> ImageSize(image.Width, image.Height);<br>        image.Dispose();<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ImageSize(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是存在如下问题：</p><ol><li>无法正确处理 webp 格式。</li><li>部分格式的图片，载入后会呈现旋转 90 度的效果。</li></ol><p>原因：<code>System.Drawing.Image</code> 过于古老，不支持 webp 格式，并且原生不会读取图片的 Exif 信息。</p><blockquote><p>百度百科：可交换图像文件格式（英语：Exchangeable image file format，官方简称Exif），是专门为数码相机的照片设定的，可以记录数码照片的属性信息和拍摄数据。</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用 ImageSharp 库可以更方便地处理图像和 EXIF 信息。ImageSharp 是一个强大的跨平台图像处理库，支持多种图像格式（包括 WebP）并自动处理 EXIF 旋转信息。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> SixLabors.ImageSharp;<br><span class="hljs-keyword">using</span> SixLabors.ImageSharp.Metadata.Profiles.Exif;<br><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImageSize <span class="hljs-title">GetImageSize</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> img</span>)</span><br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-comment">// 使用 ImageSharp 加载图像</span><br>        <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> image = Image.Load(img))<br>        &#123;<br>            <span class="hljs-comment">// ImageSharp 会自动处理 EXIF 旋转信息，因此直接获取宽度和高度即可</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ImageSize(image.Width, image.Height);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e)<br>    &#123;<br>        <span class="hljs-comment">// 如果发生异常，返回默认值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ImageSize(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Image.Load</code>: ImageSharp 的 <code>Image.Load</code> 方法会自动加载图像并处理 EXIF 旋转信息，不需要手动处理旋转问题。</p><p><code>image.Width</code> 和 <code>image.Height</code>: 这些属性会返回图像的实际宽度和高度，已经考虑了 EXIF 旋转信息。</p><h2 id="备选方案"><a href="#备选方案" class="headerlink" title="备选方案"></a>备选方案</h2><p>如果 .net 版本过低，比如仍在使用 .NET Framework 系列，而不是新的 .NET 8 等，那么 ImageSharp 可能有 bug，比如 <code>using SixLabors</code> 会报错。</p><p>可以使用如下方法，让 <code>System.Drawing.Image</code> 处理图片的 Exif 信息。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImageSize <span class="hljs-title">GetImageSize</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> img</span>)</span><br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-keyword">using</span> (System.Drawing.Image image = System.Drawing.Image.FromFile(img))<br>        &#123;<br>            <span class="hljs-comment">// Check for EXIF orientation property</span><br>            <span class="hljs-keyword">if</span> (Array.Exists(image.PropertyIdList, id =&gt; id == <span class="hljs-number">274</span>)) <span class="hljs-comment">// 274 is the EXIF orientation tag</span><br>            &#123;<br>                <span class="hljs-keyword">var</span> orientationProperty = image.GetPropertyItem(<span class="hljs-number">274</span>);<br>                <span class="hljs-built_in">int</span> orientationValue = orientationProperty.Value[<span class="hljs-number">0</span>];<br><br>                <span class="hljs-comment">// Adjust width and height based on orientation</span><br>                <span class="hljs-keyword">if</span> (orientationValue == <span class="hljs-number">6</span> || orientationValue == <span class="hljs-number">8</span>)<br>                &#123;<br>                    <span class="hljs-comment">// Swap width and height for 90 or 270 degree rotation</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ImageSize(image.Height, image.Width);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// Default case, no rotation</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ImageSize(image.Width, image.Height);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ImageSize(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Orientation Values:</p><ul><li>1：正常（无旋转）</li><li>3：旋转180度</li><li>6：旋转90度</li><li>8：旋转270度</li></ul><blockquote><p>csharp-detect-image-ratio.md</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>image</tag>
      
      <tag>ImageSharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win 输入法 首字母变成英文</title>
    <link href="/2025/03/08/win-%E8%BE%93%E5%85%A5%E6%B3%95-%E9%A6%96%E5%AD%97%E6%AF%8D%E5%8F%98%E6%88%90%E8%8B%B1%E6%96%87/"/>
    <url>/2025/03/08/win-%E8%BE%93%E5%85%A5%E6%B3%95-%E9%A6%96%E5%AD%97%E6%AF%8D%E5%8F%98%E6%88%90%E8%8B%B1%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h1 id="输入法问题"><a href="#输入法问题" class="headerlink" title="输入法问题"></a>输入法问题</h1><p>现象：在切换窗口或输入框后，接着开始打字，会出现拼音首字母直接出现在输入框内，按下第二个字母才出现输入法。</p><p>在<code>版本 23H2（OS 内部版本 22631.4751）</code>上，通过切换窗口→复制一段文字→切换回文本编辑器→粘贴→立即打字，可以稳定复现此现象。</p><p>下面这个动图展示了该现象，我分别尝试打出以下内容：</p><ul><li>第一行，期望打出<code>你好</code>，小鹤双拼为 <code>nich</code>，可看到字母 <code>n</code> 直接上屏，输入法识别到的是 <code>ich</code>。</li><li>第二行，期望打出<code>你好</code>。</li><li>第三行拼音首字母为 <code>i</code>，我按下一个字母后，可看到上屏了 <code>ch</code>，这是双拼的特点。</li><li>第四行，期望打出<code>卡键</code>。</li></ul><p><img src="https://pic1.imgdb.cn/item/67930d85d0e0a243d4f76aa9.gif" alt="example of IME&#39;s bug"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>非输入法原因造成，而是<strong>只要打开过一次屏幕键盘，就会永久产生此 bug</strong>，只能等待微软修复。<a href="https://answers.microsoft.com/zh-hans/windows/forum/all/windows11/85892fa6-cda9-467b-a633-b5ab6f1f098e">Windows11 24H2开启触摸键盘功能后，会导致输入法首字母不被自定义输入法接管（变为英文）</a>问答同样提出了下面的这种情况</p><p><img src="https://filestore.community.support.microsoft.com/api/images/45ae8b0f-a8b9-422c-bd63-d834c982c702?upload=true&fud_access=hC1SxZhn7m/ZQJkOIiOVstu10yTQgXS4A/DBzZTg8nbaCgIogkrcDydMeI5Y4za2dOqDdWtsG2JNS3E35V60i9TiGHR7STMpJHheeXuDvO8nwjUlqCBHhJ0NDvuYN7OSRRp9bmvjnhEISMadqToCfqKLVN9hlZDhkHR415ZMhl1NswjCQADON1C9TuNlqvXekgExslMTgQ53ybvVsiTJ8EMtmz+2oOJhm/5O+ImoRmXrOj3S/5ob00CwpEsjEgpc64HMVOec7iV5sbXiWN20HIynZFnehEhjStCFl5kh3XkNGtO/pgNXlhLipZwrl29TG3OqCiDpATLMsRDyIqoHy+EaRzIQsKCuuImQ4cCh20jbC+uptO6ZbFlPVTn6yYDAs4R21OyvjfgnceI3aycYoK1IU4lfBHQJXHr+i4nX2KE=" alt="IME bug from Microsoft community"></p><blockquote><p><a href="https://answers.microsoft.com/zh-hans/windows/forum/windows_11-wintop_language/windows11/85892fa6-cda9-467b-a633-b5ab6f1f098e?messageId=c170f9a7-3629-49a1-a087-2fdd5cbbc23c">此处提到</a>触摸键盘可能是引发这个问题的元凶 遂使用虚拟机全新安装24H2后 安装搜狗 打开触摸键盘后重启 问题果然复现  </p></blockquote><p><img src="https://filestore.community.support.microsoft.com/api/images/2bada343-b6ca-412e-865b-61447398558d?upload=true&fud_access=hC1SxZhn7m/ZQJkOIiOVstu10yTQgXS4A/DBzZTg8nbaCgIogkrcDydMeI5Y4za2dOqDdWtsG2JNS3E35V60i9TiGHR7STMpJHheeXuDvO8nwjUlqCBHhJ0NDvuYN7OSRtmjyFL3ihM0u/CcRjbI9qZIew00ZUHmheBdPiF8nlasyx4hP47DKni8ntgovVbktfzOCLJ5I5qtjajaw+d8ThijvDcvylsgbzPGcTvQBfo+L+91d2+B+cLr01aTUCGEF7Y7I4NQ8alBj+wuiB0KEfGk9ufmB5f1+CC/A/jVfQ8hWVuXhr48XzDH9MnbKLfVv6yttgyBhJQO2qaGtum8Y2BuSEtrs74w8vkI+J3pFVCdEnylMhd3IUMChtl+mc31X0p9FJ5qrxkiORgqbZfjoxb9ZzW6M5tSGn/W2vKQWh8=" alt="打开触摸板并粘贴文本后复现"></p><p>微软社区用户 KirsKiKi 指出，</p><blockquote><p>这个问题已经出现了半年左右。<br>我目前版本是Windows 11 24H2, 26100.3194</p><p>依然会出现该问题。每次开机必须点击开启一次 触摸键盘 才可以临时解决，关机就失效，下次开机必须再次点击一次 触摸键盘。</p><p>请求修复。</p></blockquote><p>同时，<a href="https://github.com/rime/weasel/issues/1519">ctrl+c之后，rime出现奇怪的上屏问题 · Issue #1519 · rime&#x2F;weasel</a> 也反映了相同的情况</p><p><img src="/images/win-ime/416246250-468e960d-6a72-44ff-a66b-8d4e3c17c426.gif" alt="github rime issue"></p><blockquote><p>上图中，我在notepad中Ctrl+C复制了一些文字，切换窗口后试图输入wget，此时第一个字母无法正常上屏，且一直黏在光标上。</p><p>此时我如果切到别的窗口再切回来，第一个字母w就会上屏了（这个部分没有录）。</p></blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>截止 2025-03-08，微软仍未修复此问题，<strong>只能通过开关屏幕键盘来维持本次开机期间 bug 不出现</strong>。</p><ol><li>使用 <code>Win + i</code> 打开设置界面。</li><li>转到<code>个性化</code>，<code>任务栏</code></li><li>下滑找到<code>触摸键盘</code>改成<code>始终</code></li><li>桌面右下角任务栏出现键盘图标，点击打开屏幕键盘一次，再关闭，问题解决。</li></ol><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/windows11/85892fa6-cda9-467b-a633-b5ab6f1f098e">Windows11 24H2开启触摸键盘功能后，会导致输入法首字母不被自定义输入法接管（变为英文）</a> 网友给出了如下方法</p><h3 id="TabTip-exe"><a href="#TabTip-exe" class="headerlink" title="TabTip.exe"></a>TabTip.exe</h3><blockquote><p>把”C:\Program Files\Common Files\microsoft shared\ink\TabTip.exe”加入到开机启动项能临时解决。</p><p>TabTip进程就是触摸键盘，开机打开一次，再关掉，Bug暂时就不会出现。</p></blockquote><h3 id="github-rime-输入法给出的方案"><a href="#github-rime-输入法给出的方案" class="headerlink" title="github rime 输入法给出的方案"></a>github rime 输入法给出的方案</h3><p><a href="https://github.com/oTnTh">oTnTh</a> 在 <a href="https://github.com/rime/weasel/issues/1519">ctrl+c之后，rime出现奇怪的上屏问题 · Issue #1519 · rime&#x2F;weasel</a> 给出了解决方案：</p><blockquote><p><a href="https://github.com/pqpeqr">@pqpeqr</a> 非常感谢~</p><p>有人提到将这个文件删掉可以解决问题：<code>C:\Windows\SystemApps\MicrosoftWindows.Client.CBS_cw5n1h2txyewy\TextInputHost.exe</code></p><p>去查了一下自己硬盘上的这个文件，创建时间2025&#x2F;2&#x2F;13，更新时间2025&#x2F;2&#x2F;21。</p><p>在Windows更新历史记录里，2&#x2F;21安装了KB5051989。</p><p>将这个更新卸载以后，该问题确实就消失了。看起来，确实是Windows系统更新所导致的。</p><p>另外，如果不能或者不愿意卸载更新，也可以将<code>C:\Program Files\Common Files\microsoft shared\ink\TabTip.exe</code>加入自动启动。</p><p>Windows里的设置、个性化、文本输入，往下拉找触摸键盘，将键盘大小设置为最小，然后拖到桌面右下角。</p><p>该触摸键盘似乎是会自动隐藏的，权且可以当作一个临时的解决办法。</p></blockquote><h3 id="杂项解决方法"><a href="#杂项解决方法" class="headerlink" title="杂项解决方法"></a>杂项解决方法</h3><ol><li>新建用户</li><li>重装系统</li><li>使用微软拼音输入法</li><li>在 PE 环境下，重命名 <code>C:\Windows\SystemApps\MicrosoftWindows.Client.CBS_cw5n1h2txyewy</code> 到任意其他文件名。</li><li>（不推荐）重命名 <code>C:\Windows\SystemApps\MicrosoftWindows.Client.CBS_cw5n1h2txyewy</code> 里的 <code>TextInputHost.exe</code> 到其他名称。但可能导致 <code>Win+V</code> 剪贴板不工作。同时有用户指出，也会导致左下角任务栏搜索功能失效</li><li>（无效）有回答提到，升级 <code>Windows11 KB5048667</code> 可以解决，但后续回复表示，仍未解决。</li></ol><h2 id="与此问题有关的链接"><a href="#与此问题有关的链接" class="headerlink" title="与此问题有关的链接"></a>与此问题有关的链接</h2><ul><li><a href="https://answers.microsoft.com/zh-hans/windows/forum/windows_11-wintop_language/windows11/85892fa6-cda9-467b-a633-b5ab6f1f098e?messageId=c170f9a7-3629-49a1-a087-2fdd5cbbc23c">Windows11 24H2开启触摸键盘功能后导致输入法首字母会变英文</a></li><li><a href="https://bbs.pcbeta.com/viewthread-2029177-1-1.html">win11 24H2 第三方输入法吞首字母Bug严重影响日常使用</a></li><li><a href="https://blog.csdn.net/alan16356/article/details/143787272">Win11 24H2&#x2F;23H2 输入法 首字母变成英文&#x2F;首字母打不出汉字&#x2F;首击键不被认定为拼音 临时解决方案</a></li></ul><p>上文第一个链接下面给出了修复方法，但涉及更改文件，未自行尝试。</p><p>用户 John Smith_2001 提出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">我尝试了如下方法，解决了问题：<br>在 Windows PE 环境下将：<br>C:\Windows\SystemApps\MicrosoftWindows<span class="hljs-selector-class">.Client</span><span class="hljs-selector-class">.CBS_cw5n1h2txyewy</span><br>进行重命名，变成<br>C:\Windows\SystemApps\MicrosoftWindows<span class="hljs-selector-class">.Client</span><span class="hljs-selector-class">.CBS_cw5n1h2txyewy</span><span class="hljs-selector-class">.bak</span><br>之后进入系统，问题解决了。<br></code></pre></td></tr></table></figure><p>用户 SuHeAndZI 提出</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">感谢提供方法和思路 <br>在此基础上我研究这个问题应该是<br>C:\Windows\SystemApps\MicrosoftWindows.Client.CBS_cw5n1h2txyewy里的TextInputHost.exe引发 <br>只重命名此文件即可解决 非常感谢！<br>不过经朋友测试后发现（因为我已经重装了系统） 重命名TextInputHost.exe会使<span class="hljs-keyword">win</span>+v和<span class="hljs-keyword">win</span>+。的两个功能失效<br>不知道还会不会有更多副作用 还是请官方积极重视此问题 尽快解决<br></code></pre></td></tr></table></figure><p>用户 hl h1 提出：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">我尝试了如下方法，解决了问题：<br>在 Windows PE 环境下将：<br>C:\Windows\SystemApps\MicrosoftWindows<span class="hljs-selector-class">.Client</span><span class="hljs-selector-class">.CBS_cw5n1h2txyewy</span><br>进行重命名，变成<br>C:\Windows\SystemApps\MicrosoftWindows<span class="hljs-selector-class">.Client</span><span class="hljs-selector-class">.CBS_cw5n1h2txyewy</span><span class="hljs-selector-class">.bak</span><br>之后进入系统，问题解决了。    <br>用了楼上的方法解决了，不过毕竟烦 要做PE然后 在PE里面修改，现在的硬盘都默认加密，还要一串解密的码。电脑小白比较麻烦，稍微懂一点的可以解决。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>troubleshoot</tag>
      
      <tag>windows</tag>
      
      <tag>输入法</tag>
      
      <tag>IME</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>支持中文的等宽字体</title>
    <link href="/2025/02/12/other-%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E7%9A%84%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93/"/>
    <url>/2025/02/12/other-%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E7%9A%84%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h1 id="支持中文的等宽字体（中英文可对齐）"><a href="#支持中文的等宽字体（中英文可对齐）" class="headerlink" title="支持中文的等宽字体（中英文可对齐）"></a>支持中文的等宽字体（中英文可对齐）</h1><p>本文介绍了一些可用于中文的编程字体，且中英文混排时，中英文可以对齐</p><h2 id="更纱黑体系列"><a href="#更纱黑体系列" class="headerlink" title="更纱黑体系列"></a>更纱黑体系列</h2><p><a href="https://github.com/be5invis/Sarasa-Gothic">Sarasa Gothic</a> 是一个免费的开源字体，支持拉丁语，希腊语和西里尔字母。</p><p><strong>Sarasa Fixed SC</strong></p><p><img src="/images/mono-font/Sarasa%20Fixed%20SC.png" alt="Sarasa Fixed SC"></p><p><strong>Sarasa Term SC</strong></p><p><img src="/images/mono-font/Sarasa%20Term%20SC.png" alt="Sarasa Term SC"></p><h2 id="Maple-mono"><a href="#Maple-mono" class="headerlink" title="Maple mono"></a>Maple mono</h2><p><a href="https://github.com/subframe7536/maple-font">maple-font</a> Maple Mono: Open source monospace font with round corner, ligatures and Nerd-Font for IDE and command line, fine-grained customization options.</p><p>带连字和控制台图标的圆角等宽字体，中英文宽度完美2:1，细粒度的自定义选项</p><p><img src="/images/mono-font/Maple%20Mono%20SC%20NF.png" alt="Maple mono"></p><p>其<a href="https://github.com/subframe7536/maple-font">官方 github 页面</a>给出了图片示例</p><p><img src="/images/mono-font/maple-header.png" alt="maple mono banner"></p><p><img src="/images/mono-font/maple-2-1.png" alt="maple mono github example 1"></p><p><img src="https://github.com/subframe7536/maple-font/blob/variable/resources/showcase.png?raw=true" alt="maple mono github example 2"></p><p>这个字体的斜体有特殊设计，看起来挺好看</p><h2 id="LXGW-Bright-Code"><a href="#LXGW-Bright-Code" class="headerlink" title="LXGW Bright Code"></a>LXGW Bright Code</h2><p><a href="https://github.com/lxgw/LxgwBright-Code">LxgwBright-Code</a> A merged font of Monaspace Argon and LXGW WenKai.</p><p>仓库介绍：</p><blockquote><p>LXGW Bright Code 是由 <a href="https://github.com/githubnext/monaspace">Monaspace Argon</a> 与 <a href="https://github.com/lxgw/LxgwWenKai">霞鹜文楷系列字体</a> 合并而成的字体，采用 <a href="https://github.com/nowar-fonts/Warcraft-Font-Merger">魔兽字体合并补全工具</a> 合并。仅提供 TrueType 格式字体文件。</p></blockquote><p><img src="/images/mono-font/LXGW%20Bright%20Code.png" alt="LXGW Bright Code"></p><h2 id="Noto-Sans-Mono-CJK-SC"><a href="#Noto-Sans-Mono-CJK-SC" class="headerlink" title="Noto Sans Mono CJK SC"></a>Noto Sans Mono CJK SC</h2><p><a href="https://notofonts.github.io/noto-docs/specimen/NotoSansMonoCJKsc/">Noto Sans Mono CJK SC</a> is a monospaced, unmodulated (“sans serif”) design suitable for programming code and other uses where a fixed-width font is needed.</p><p><img src="/images/mono-font/Noto%20Sans%20Mono%20CJK%20SC.png" alt="Noto Sans Mono CJK SC"></p><p>Noto 字体官方指出，”Noto Sans Mono CJK SC contains 65,535 glyphs”。这一字体包括的字形非常多，可以涵盖部分生僻字。这款字体同样适合给 $\LaTeX$ 编辑器使用，方便编辑生僻字文档。</p><h2 id="YaHei-Ubuntu-Mono"><a href="#YaHei-Ubuntu-Mono" class="headerlink" title="YaHei Ubuntu Mono"></a>YaHei Ubuntu Mono</h2><p><a href="https://github.com/chenyium/Microsoft-Yahei-Mono">Github</a></p><p>其仓库注明</p><blockquote><p>个人非常喜欢的一款编程字体，所以从网上找来资源，放到 GitHub 上备用，后续如果有更新，也方便版本追溯。</p></blockquote><p><img src="/images/mono-font/YaHei%20Ubuntu%20Mono.png" alt="YaHei Ubuntu Mono"></p><h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><p>在支持字体 fallback 机制的编辑器中，还可以设置字体为 Ubuntu Mono derivative Powerline 和微软雅黑，这两个字体刚好能够将中英文进行对齐。</p><p><img src="/images/mono-font/Ubuntu%20Mono%20derivative%20Powerline+yahei.png" alt="Ubuntu Mono derivative Powerline+yahei"></p>]]></content>
    
    
    <categories>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>font</tag>
      
      <tag>mono font</tag>
      
      <tag>monospace font</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows 屏幕自动关闭后又会自动亮起</title>
    <link href="/2025/02/06/windows-%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E5%90%8E%E5%8F%88%E4%BC%9A%E8%87%AA%E5%8A%A8%E4%BA%AE%E8%B5%B7/"/>
    <url>/2025/02/06/windows-%E5%B1%8F%E5%B9%95%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E5%90%8E%E5%8F%88%E4%BC%9A%E8%87%AA%E5%8A%A8%E4%BA%AE%E8%B5%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="windows-屏幕自动关闭后又会自动亮起"><a href="#windows-屏幕自动关闭后又会自动亮起" class="headerlink" title="windows 屏幕自动关闭后又会自动亮起"></a>windows 屏幕自动关闭后又会自动亮起</h1><p>现象：到电源设置的指定时间后息屏，1秒后屏幕有立即亮起。使用如下脚本人工触发息屏，仍然1秒后亮起：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">powershell (Add-Type <span class="hljs-string">&#x27;[DllImport(\&quot;user32.dll\&quot;)]^public static extern int SendMessage(int hWnd, int hMsg, int wParam, int lParam);&#x27;</span> -Name a -Pas)::SendMessage(-1,0x0112,0xF170,2)<br></code></pre></td></tr></table></figure><p>根据网络上搜索，以尝试一下的<strong>方案均无效</strong>：</p><table><thead><tr><th>操作</th><th>原因</th></tr></thead><tbody><tr><td>拔出罗技鼠标</td><td>有人提到罗技 G903 会唤醒屏幕。经测试拔出自己的 G502 后无效。</td></tr><tr><td>关闭蓝牙</td><td>台式机自带蓝牙，且平时是开启状态。无效。</td></tr><tr><td>关闭高漫数位板驱动</td><td>无效。</td></tr></tbody></table><h2 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h2><p>此问题发生是因为自己把电脑搬到了另一个房间，随后就出现了自动亮屏的问题。在 <a href="https://www.chiphell.com/thread-2579147-1-1.html">显示器自动息屏后，过一会时间就会自动亮屏是什么原因</a> 上看到了疑似的解决方案：</p><blockquote><p>我的小主机有遇到这情况，雷电4转DP或自带的DP接口接U2410，老是无缘无故自动亮屏+息屏反复循环。<br>后来换HDMI就解决了，搞不懂是什么情况。</p></blockquote><p>结合自己遇到的情况，很有可能是显示器接口问题。</p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>troubleshoot</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blazor 上传文件</title>
    <link href="/2025/02/05/blazor-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <url>/2025/02/05/blazor-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="blazor-上传文件"><a href="#blazor-上传文件" class="headerlink" title="blazor 上传文件"></a>blazor 上传文件</h1><p><a href="https://learn.microsoft.com/zh-cn/aspnet/core/blazor/file-uploads?view=aspnetcore-9.0">ASP.NET Core Blazor 文件上传 | Microsoft Learn</a></p><p>前端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">InputFile</span> <span class="hljs-attr">OnChange</span>=<span class="hljs-string">&quot;LoadIconFiles&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>后端，为了方便，封装一个可以保存到不同目录，并回显保存到何处的函数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> Task&lt;<span class="hljs-built_in">string</span>&gt; __UploadTo(InputFileChangeEventArgs obj, <span class="hljs-built_in">string</span> saveToFolderName)<br>&#123;<br>    <span class="hljs-keyword">if</span> (obj?.File != <span class="hljs-literal">null</span>)<br>    &#123;<br>        Log.Information(<span class="hljs-string">&quot;File uploading: &#123;Name&#125;&quot;</span>, obj.File.Name);<br>        <span class="hljs-keyword">var</span> <span class="hljs-keyword">file</span> = obj.File;<br>        <span class="hljs-keyword">var</span> fileName = <span class="hljs-keyword">file</span>.Name;<br>        <span class="hljs-keyword">var</span> ext = Path.GetExtension(fileName);<br>        <span class="hljs-keyword">var</span> stem = Path.GetFileNameWithoutExtension(fileName);<br>        <span class="hljs-keyword">var</span> newFileName = stem + ext;<br>        <span class="hljs-keyword">var</span> filePath = Path.Combine(<span class="hljs-string">&quot;wwwroot&quot;</span>, saveToFolderName, newFileName);<br>        <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> stream = <span class="hljs-keyword">new</span> FileStream(filePath, FileMode.Create))<br>        &#123;<br>            <span class="hljs-keyword">await</span> <span class="hljs-keyword">file</span>.OpenReadStream(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">30</span>).CopyToAsync(stream);<br>        &#125;<br>        Log.Information(<span class="hljs-string">&quot;File uploaded: &#123;Name&#125; - &#123;Path&#125;&quot;</span>, fileName, filePath);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">$&quot;使用此名称作为文件图片名: /<span class="hljs-subst">&#123;saveToFolderName&#125;</span>/<span class="hljs-subst">&#123;fileName&#125;</span>&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;请选择图片上传&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">LoadIconFiles</span>(<span class="hljs-params">InputFileChangeEventArgs arg</span>)</span><br>&#123;<br>    <span class="hljs-keyword">var</span> msg = <span class="hljs-keyword">await</span> __UploadTo(arg, saveToFolderName: <span class="hljs-string">&quot;img&quot;</span>);<br>    _loadIconPrompt = msg;<br>    StateHasChanged();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意其中的 <code>await file.OpenReadStream(1024 * 1024 * 30).CopyToAsync(stream);</code>，里面指定的是文件大小，单位为字节。若此数量过低，则无法上传文件。</p><p><strong>这样的方法会把上传的文件载入内存。如果上传大文件，看下文的微软官方文档</strong></p><blockquote><p>服务器端或客户端，没有文件读取或上传大小限制，尤其对于 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.components.forms.inputfile">InputFile</a> 组件。 但是，将数据从 JavaScript 封送到 C# 时，客户端 Blazor 会将文件的字节读取到单个 JavaScript 数组缓冲区中，大小不超过 2 GB 或设备的可用内存。 使用 &gt; 组件进行客户端上传时，大型文件上传 (<a href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.components.forms.inputfile">InputFile</a> 250 MB) 可能会失败。 有关详细信息，请参阅以下讨论：</p><ul><li><a href="https://github.com/dotnet/runtime/issues/84685">文件上传时，Blazor InputFile Component 应处理分块 (dotnet&#x2F;runtime #84685)</a></li><li><a href="https://github.com/dotnet/runtime/issues/36634">通过 http 处理程序请求流式上传 (dotnet&#x2F;runtime #36634)</a></li></ul></blockquote><blockquote><p> 对于尝试使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.components.forms.inputfile">InputFile</a> 组件时失败的大型客户端文件上传，建议使用多个 <a href="https://developer.mozilla.org/docs/Web/HTTP/Range_requests">HTTP 范围请求</a>（而不是使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.components.forms.inputfile">InputFile</a> 组件）通过自定义组件将大型文件分块。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>asp.net</tag>
      
      <tag>web</tag>
      
      <tag>balzor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csharp 临时让出 sqlite 数据库</title>
    <link href="/2025/02/02/csharp-%E4%B8%B4%E6%97%B6%E8%AE%A9%E5%87%BA-sqlite-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2025/02/02/csharp-%E4%B8%B4%E6%97%B6%E8%AE%A9%E5%87%BA-sqlite-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="csharp-临时让出-sqlite-数据库"><a href="#csharp-临时让出-sqlite-数据库" class="headerlink" title="csharp 临时让出 sqlite 数据库"></a>csharp 临时让出 sqlite 数据库</h1><h2 id="使用-Dump"><a href="#使用-Dump" class="headerlink" title="使用 .Dump"></a>使用 .Dump</h2><p>SQLite 提供了 <code>.dump</code> 命令，可以将整个数据库导出为 SQL 脚本。你可以通过执行此命令生成备份文件，然后传输该文件。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>使用 SQLite 命令行工具或代码执行 <code>.dump</code> 命令。</li><li>将生成的 SQL 文件传输到前端。</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> connection = <span class="hljs-keyword">new</span> SQLiteConnection(<span class="hljs-string">&quot;Data Source=path/to/your/database.db&quot;</span>))<br>&#123;<br>    connection.Open();<br>    <span class="hljs-keyword">var</span> command = connection.CreateCommand();<br>    command.CommandText = <span class="hljs-string">&quot;.dump&quot;</span>; <span class="hljs-comment">// 导出整个数据库为 SQL 脚本</span><br><br>    <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> reader = command.ExecuteReader())<br>    <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> writer = <span class="hljs-keyword">new</span> StreamWriter(<span class="hljs-string">&quot;backup.sql&quot;</span>))<br>    &#123;<br>        <span class="hljs-keyword">while</span> (reader.Read())<br>        &#123;<br>            writer.WriteLine(reader.GetString(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 将 SQL 脚本写入文件</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-VACUUM（推荐）"><a href="#使用-VACUUM（推荐）" class="headerlink" title="使用 VACUUM（推荐）"></a>使用 VACUUM（推荐）</h2><p>SQLite 3.27.0 及以上版本支持 <code>VACUUM INTO</code> 命令，可以将数据库备份到一个新的文件中。</p><h3 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>执行 <code>VACUUM INTO</code> 命令，将数据库备份到新文件。</li><li>传输新文件。</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> connection = <span class="hljs-keyword">new</span> SQLiteConnection(<span class="hljs-string">&quot;Data Source=path/to/your/database.db&quot;</span>))<br>&#123;<br>    connection.Open();<br>    <span class="hljs-keyword">var</span> command = connection.CreateCommand();<br>    command.CommandText = <span class="hljs-string">&quot;VACUUM INTO &#x27;path/to/backup.db&#x27;&quot;</span>; <span class="hljs-comment">// 备份到新文件</span><br>    command.ExecuteNonQuery();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="EF-Core-版本"><a href="#EF-Core-版本" class="headerlink" title="EF Core 版本"></a>EF Core 版本</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">DownloadSql</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (File.Exists(<span class="hljs-string">&quot;backup.db&quot;</span>))<br>    &#123;<br>        File.Delete(<span class="hljs-string">&quot;backup.db&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> db=<span class="hljs-keyword">new</span> Models.ChargeDb())<br>    &#123;<br>        <span class="hljs-keyword">var</span> connection = db.Database.GetDbConnection();<br>        <span class="hljs-keyword">await</span> connection.OpenAsync();<br>        <span class="hljs-comment">// execute .dump command</span><br>        <span class="hljs-keyword">using</span> <span class="hljs-keyword">var</span> command = connection.CreateCommand();<br>        command.CommandText = <span class="hljs-string">&quot;VACUUM INTO &#x27;backup.db&#x27;;&quot;</span>;<br>        command.ExecuteNonQuery();<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> fileStream = File.OpenRead(<span class="hljs-string">&quot;backup.db&quot;</span>);<br>    <span class="hljs-keyword">var</span> fileName = <span class="hljs-string">$&quot;charging_<span class="hljs-subst">&#123;DateTime.Now:yyyy-MM-dd&#125;</span>.db&quot;</span>;<br><br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">var</span> streamRef = <span class="hljs-keyword">new</span> DotNetStreamReference(stream: fileStream);<br><br>    <span class="hljs-keyword">await</span> JS.InvokeVoidAsync(<span class="hljs-string">&quot;downloadFileFromStream&quot;</span>, fileName, streamRef);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-EF-Core-迁移"><a href="#使用-EF-Core-迁移" class="headerlink" title="使用 EF Core 迁移"></a>使用 EF Core 迁移</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dotnet ef migrations script --output backup.sql<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>asp.net</tag>
      
      <tag>microsoft</tag>
      
      <tag>ef core</tag>
      
      <tag>sqlite</tag>
      
      <tag>dotnet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csharp EF Core 同一个实体被多次 tracked</title>
    <link href="/2025/02/02/csharp-EF-Core%E5%90%8C%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BD%93%E8%A2%AB%E5%A4%9A%E6%AC%A1tracked/"/>
    <url>/2025/02/02/csharp-EF-Core%E5%90%8C%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BD%93%E8%A2%AB%E5%A4%9A%E6%AC%A1tracked/</url>
    
    <content type="html"><![CDATA[<h1 id="csharp-EF-Core-同一个实体被多次-tracked"><a href="#csharp-EF-Core-同一个实体被多次-tracked" class="headerlink" title="csharp EF Core 同一个实体被多次 tracked"></a>csharp EF Core 同一个实体被多次 tracked</h1><p>具体体现为：</p><p><code>he instance of entity type ‘XXXX’ cannot be tracked because another instance with the same key value for &#123;‘Key’&#125; is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached.</code></p><p>原因：在使用 ef 查询后，再使用 ef 更新参与了查询的实体，就会报此错误。</p><h2 id="重现"><a href="#重现" class="headerlink" title="重现"></a>重现</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// _selectedCategory 是 db.Category 里的一个实例</span><br>    <br><span class="hljs-keyword">var</span> relatedDevices = db.Devices<br>    .Include(d =&gt; d.Category)<br>    .Where(d =&gt; d.Category == _selectedCategory)<br>    .ToList();<br><br><br>db.Categories.Remove(_selectedCategory);<br><br></code></pre></td></tr></table></figure><h2 id="解决：AsNoTracking"><a href="#解决：AsNoTracking" class="headerlink" title="解决：AsNoTracking"></a>解决：AsNoTracking</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 下面位置添加 .AsNoTracking()</span><br>    <br><span class="hljs-keyword">var</span> relatedDevices = db.Devices.AsNoTracking()<br>    .Include(d =&gt; d.Category)<br>    .Where(d =&gt; d.Category == _selectedCategory)<br>    .ToList();<br><br>db.Categories.Remove(_selectedCategory);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>asp.net</tag>
      
      <tag>microsoft</tag>
      
      <tag>ef core</tag>
      
      <tag>dotnet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blazor 进行表单校验</title>
    <link href="/2025/02/02/blazor-%E8%BF%9B%E8%A1%8C%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/"/>
    <url>/2025/02/02/blazor-%E8%BF%9B%E8%A1%8C%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Blazor-表单校验"><a href="#Blazor-表单校验" class="headerlink" title="Blazor 表单校验"></a>Blazor 表单校验</h1><h2 id="使用-EditForm"><a href="#使用-EditForm" class="headerlink" title="使用 EditForm"></a>使用 EditForm</h2><p><a href="https://learn.microsoft.com/zh-cn/aspnet/core/blazor/forms/input-components?view=aspnetcore-9.0">ASP.NET Core Blazor 输入组件 | Microsoft Learn</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">EditForm</span> <span class="hljs-attr">EditContext</span>=<span class="hljs-string">&quot;editContext&quot;</span> <span class="hljs-attr">OnValidSubmit</span>=<span class="hljs-string">&quot;Submit&quot;</span> <span class="hljs-attr">FormName</span>=<span class="hljs-string">&quot;newCategoryForm&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;CatName&quot;</span>&gt;</span>类别名称<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">InputText</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CatName&quot;</span> @<span class="hljs-attr">bind-Value</span>=<span class="hljs-string">&quot;_newCategory.CatName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ValidationMessage</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-orange-300&quot;</span> <span class="hljs-attr">For</span>=<span class="hljs-string">&quot;() =&gt; _newCategory.CatName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ValidationMessage</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;CatColor&quot;</span>&gt;</span>类别颜色<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">InputText</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CatColor&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;color&quot;</span> @<span class="hljs-attr">bind-Value</span>=<span class="hljs-string">&quot;_newCategory.CatColor&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ValidationMessage</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-orange-300&quot;</span> <span class="hljs-attr">For</span>=<span class="hljs-string">&quot;() =&gt; _newCategory.CatColor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ValidationMessage</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-btn&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">EditForm</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>FormName</code> 填写一个每个表单不重复的名称</li><li><code>_newCategory</code> 是后台绑定的一个模型，具有 <code>CatName</code> 和 <code>CatColor</code> 属性。</li></ul><p>后天</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">NewCategory</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> CatName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> CatColor &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br><br><span class="hljs-comment">// 需要标注 [SupplyParameterFromForm]</span><br>[<span class="hljs-meta">SupplyParameterFromForm</span>] <span class="hljs-keyword">private</span> NewCategory _newCategory &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125; = <span class="hljs-keyword">new</span> NewCategory();<br><br><span class="hljs-comment">// 用于检查</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Regex _colorRegex = <span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;^#[0-9a-fA-F]&#123;6&#125;$&quot;</span>, RegexOptions.Compiled);<br><br><span class="hljs-comment">// 使用 EditContext 和 ValidationMessageStore</span><br><span class="hljs-keyword">private</span> EditContext? editContext;<br><span class="hljs-keyword">private</span> ValidationMessageStore? messageStore;<br><br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInitialized</span>()</span><br>&#123;<br>    _newCategory ??= <span class="hljs-keyword">new</span>();<br>    editContext = <span class="hljs-keyword">new</span>(_newCategory);<br>    editContext.OnValidationRequested += (sender, <span class="hljs-keyword">args</span>) =&gt;<br>    &#123;<br>        messageStore?.Clear();<br>        <span class="hljs-comment">// 添加到 messageStore 后，就会在前端对应的 ValidationMessage 内显示。</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>.IsNullOrEmpty(_newCategory.CatName))<br>        &#123;<br>            messageStore?.Add(editContext.Field(<span class="hljs-string">&quot;CatName&quot;</span>), <span class="hljs-string">&quot;类别名称不能为空。&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>.IsNullOrEmpty(_newCategory.CatColor) || !_colorRegex.IsMatch(_newCategory.CatColor))<br>        &#123;<br>            messageStore?.Add(editContext.Field(<span class="hljs-string">&quot;CatColor&quot;</span>), <span class="hljs-string">&quot;类别颜色格式不正确。&quot;</span>);<br>        &#125;<br>    &#125;;<br>    messageStore = <span class="hljs-keyword">new</span>(editContext);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用手动检查"><a href="#使用手动检查" class="headerlink" title="使用手动检查"></a>使用手动检查</h2><p>对于简单的字符串检查：</p><p><a href="https://learn.microsoft.com/zh-cn/aspnet/core/blazor/components/data-binding?view=aspnetcore-9.0#use-bindgetbindset-modifiers-and-avoid-event-handlers-for-two-way-data-binding">ASP.NET Core Blazor 数据绑定 | Microsoft Learn</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-input&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span><br><span class="hljs-tag">       @<span class="hljs-attr">bind:get</span>=<span class="hljs-string">&quot;chargeDate&quot;</span></span><br><span class="hljs-tag">       @<span class="hljs-attr">bind:set</span>=<span class="hljs-string">&quot;ValidateDateInput&quot;</span></span><br><span class="hljs-tag">       @<span class="hljs-attr">bind:event</span>=<span class="hljs-string">&quot;oninput&quot;</span> /&gt;</span><br>@if (!isDateValid)<br>&#123;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-orange-300&quot;</span>&gt;</span>日期格式不正确<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>chargeDate</code> 是一个字符串。</p><p>使用 <code>@bind:get</code>&#x2F;<code>@bind:set</code> 修饰符，既能通过 <code>@bind:set</code> 控制 <code>chargeDate</code> 的基础值，又能通过 <code>@bind:get</code> 将 <code>inputValue</code> 的值绑定到元素的值。 </p><p><code>@bind:event=&quot;oninput&quot;</code> 会在输入变更后立即触发校验。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> chargeDate = DateTime.Now.ToString(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> isDateValid = <span class="hljs-literal">true</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ValidateDateInput</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> obj</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 由于不再是直接 @bind，需要手动更新 chargeDate 的值</span><br>    chargeDate = obj;<br>    <span class="hljs-comment">// 更新布尔变量</span><br>    isDateValid = DateTime.TryParse(obj, <span class="hljs-keyword">out</span> DateTime date);<br>    <span class="hljs-comment">// 通知界面状态变化</span><br>    StateHasChanged();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>asp.net</tag>
      
      <tag>blazor</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blazor EF core 数据库实现前端下拉选择物品类别</title>
    <link href="/2025/02/01/blazor-EF-core-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E4%B8%8B%E6%8B%89%E9%80%89%E6%8B%A9%E7%89%A9%E5%93%81%E7%B1%BB%E5%88%AB/"/>
    <url>/2025/02/01/blazor-EF-core-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E4%B8%8B%E6%8B%89%E9%80%89%E6%8B%A9%E7%89%A9%E5%93%81%E7%B1%BB%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-EF-Core-和-Blazor-实现设备类别关联修改"><a href="#使用-EF-Core-和-Blazor-实现设备类别关联修改" class="headerlink" title="使用 EF Core 和 Blazor  实现设备类别关联修改"></a>使用 EF Core 和 Blazor  实现设备类别关联修改</h1><p>使用<code>efcore</code>和<code>blazor</code>连接数据库，数据库有两个表，一个设备，一个类别，设备通过一个整数关联到类别表。</p><p>类别表有类别id、类别名称两个字段，设备有设备id、设备名、类别id字段。</p><p>在前端展示所有的设备，其类别显示为一个下拉框，我可以通过下拉框改变设备的类别，并通过按钮保存。</p><h2 id="创建数据模型"><a href="#创建数据模型" class="headerlink" title="创建数据模型"></a>创建数据模型</h2><p>在<code>Models</code>文件夹下创建<code>Category.cs</code>和<code>Device.cs</code>文件。</p><p><strong>Category.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">YourNamespace.Models</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Category</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> CategoryId &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> CategoryName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Device.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">YourNamespace.Models</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Device</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> DeviceId &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> DeviceName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-comment">// 关键：CategoryId 和 Category</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> CategoryId &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> Category Category &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Blazor-组件"><a href="#Blazor-组件" class="headerlink" title="Blazor 组件"></a>Blazor 组件</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&lt;table <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;<br>    &lt;thead&gt;<br>        &lt;tr&gt;<br>            &lt;th&gt;设备名&lt;/th&gt;<br>            &lt;th&gt;类别&lt;/th&gt;<br>            &lt;th&gt;操作&lt;/th&gt;<br>        &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>        <br>@foreach (<span class="hljs-keyword">var</span> device <span class="hljs-keyword">in</span> devices)<br>        &#123;<br>            &lt;tr&gt;<br>                &lt;td&gt;@device.DeviceName&lt;/td&gt;<br>                &lt;td&gt;<br>                    &lt;<span class="hljs-keyword">select</span> @bind-<span class="hljs-keyword">value</span>=<span class="hljs-string">&quot;device.CategoryId&quot;</span>&gt;<br>@foreach (<span class="hljs-keyword">var</span> category <span class="hljs-keyword">in</span> categories)<br>                        &#123;<br>                            &lt;option <span class="hljs-keyword">value</span>=<span class="hljs-string">&quot;@category.CategoryId&quot;</span>&gt;@category.CategoryName&lt;/option&gt;<br>                        &#125;<br>                    &lt;/<span class="hljs-keyword">select</span>&gt;<br>                &lt;/td&gt;<br>                &lt;td&gt;<br>                    &lt;button <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> @onclick=<span class="hljs-string">&quot;@(async () =&gt; await UpdateExistingEntry(device))&quot;</span>&gt;保存&lt;/button&gt;<br>                &lt;/td&gt;<br>            &lt;/tr&gt;<br>        &#125;<br><br>    &lt;/tbody&gt;<br>&lt;/table&gt;<br><br>@code<br>    &#123;<br>        <span class="hljs-keyword">private</span> List&lt;DbContext.Category&gt; categories = <span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">private</span> List&lt;DbContext.Device&gt; devices = <span class="hljs-keyword">new</span>();<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInitialized</span>()</span><br>        &#123;<br><br>            UpdateDeviceList();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateDeviceList</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> db = <span class="hljs-keyword">new</span> ChargeDb())<br>            &#123;<br>                <span class="hljs-comment">// categories</span><br>                categories = db.Categories.ToList();<br>                <span class="hljs-comment">// devices</span><br>                devices = db.Devices.Include(d =&gt; d.Category)<br>                    .ToList();<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">UpdateExistingEntry</span>(<span class="hljs-params">DbContext.Device device</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> db = <span class="hljs-keyword">new</span> ChargeDb())<br>            &#123;<br>                <span class="hljs-keyword">var</span> existingDevice = db.Devices.Include(d =&gt; d.Category).FirstOrDefault(d =&gt; d.Id == device.Id);<br><br>                <br>                existingDevice.Description = device.Description;<br>                existingDevice.ImageUrl = device.ImageUrl;<br>                existingDevice.Name = device.Name;<br>                existingDevice.CategoryId = device.CategoryId;<br><br>                db.SaveChanges();<br>                Log.Information(<span class="hljs-string">&quot;Device updated: dev &#123;Id&#125; - cat &#123;CategoryId&#125;&quot;</span>, device.Id, device.CategoryId);<br>            &#125;<br><br>            UpdateDeviceList(); <span class="hljs-comment">// 更新设备列表以显示更改</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ol><li><code>ef core</code> 实体模型在设置 <code>Category</code> 导航属性时，同时设置一个叫 <code>CategoryId</code> 的 <code>int</code> 属性，这样在前端做数据绑定时，绑定这个属性。</li><li><code>select</code> 绑定 <code>device</code> 的 <code>CategoryId</code>，<code>select</code> 内部的 <code>option</code> 绑定 <code>category.CategoryId</code></li></ol><h2 id="附：EF-Core-命名约定"><a href="#附：EF-Core-命名约定" class="headerlink" title="附：EF Core 命名约定"></a>附：EF Core 命名约定</h2><p>考虑</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Id &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> ICollection&lt;Post&gt; Posts &#123; <span class="hljs-keyword">get</span>; &#125; = <span class="hljs-keyword">new</span> List&lt;Post&gt;();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Id &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>? BlogId &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> Blog? Blog &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>Blog</code> 类包含一个 <code>ICollection&lt;Post&gt;</code> 类型的 <code>Posts</code> 属性，这表明一个 <code>Blog</code> 可以包含多个 <code>Post</code>，是一对多关系中的 “一” 方。</li><li><code>Post</code> 类包含一个可空的 <code>int? BlogId</code> 属性和一个可空的 <code>Blog? Blog</code> 属性。<code>BlogId</code> 属性名遵循 EF Core 的外键命名约定，即 <code>[导航属性名][主表主键名]</code>，在这种情况下，导航属性名是 <code>Blog</code>，主表（<code>Blog</code> 类）的主键名是 <code>Id</code>，所以 <code>BlogId</code> 会被 EF Core 自动识别为外键。</li></ul><p>完整示例如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Microsoft.EntityFrameworkCore;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><br><span class="hljs-comment">// 定义 Blog 类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Id &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> ICollection&lt;Post&gt; Posts &#123; <span class="hljs-keyword">get</span>; &#125; = <span class="hljs-keyword">new</span> List&lt;Post&gt;();<br>&#125;<br><br><span class="hljs-comment">// 定义 Post 类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Id &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>? BlogId &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> Blog? Blog &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义数据库上下文类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BloggingContext</span> : <span class="hljs-title">DbContext</span><br>&#123;<br>    <span class="hljs-keyword">public</span> DbSet&lt;Blog&gt; Blogs &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> DbSet&lt;Post&gt; Posts &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnConfiguring</span>(<span class="hljs-params">DbContextOptionsBuilder optionsBuilder</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// 使用 SQLite 数据库，这里可根据实际情况修改连接字符串</span><br>        optionsBuilder.UseSqlite(<span class="hljs-string">&quot;Data Source=blogging.db&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> context = <span class="hljs-keyword">new</span> BloggingContext())<br>        &#123;<br>            <span class="hljs-comment">// 创建数据库（如果不存在）</span><br>            <span class="hljs-keyword">await</span> context.Database.EnsureCreatedAsync();<br><br>            <span class="hljs-comment">// 创建一个 Blog 实例</span><br>            <span class="hljs-keyword">var</span> blog = <span class="hljs-keyword">new</span> Blog();<br>            context.Blogs.Add(blog);<br><br>            <span class="hljs-comment">// 创建一个 Post 实例并关联到上面的 Blog</span><br>            <span class="hljs-keyword">var</span> post = <span class="hljs-keyword">new</span> Post &#123; Blog = blog &#125;;<br>            context.Posts.Add(post);<br><br>            <span class="hljs-comment">// 保存更改到数据库</span><br>            <span class="hljs-keyword">await</span> context.SaveChangesAsync();<br><br>            <span class="hljs-comment">// 查询 Post 并验证关联</span><br>            <span class="hljs-keyword">var</span> retrievedPost = <span class="hljs-keyword">await</span> context.Posts<br>               .Include(p =&gt; p.Blog)<br>               .FirstOrDefaultAsync();<br><br>            <span class="hljs-keyword">if</span> (retrievedPost != <span class="hljs-literal">null</span> &amp;&amp; retrievedPost.Blog != <span class="hljs-literal">null</span>)<br>            &#123;<br>                System.Console.WriteLine(<span class="hljs-string">$&quot;Post <span class="hljs-subst">&#123;retrievedPost.Id&#125;</span> is associated with Blog <span class="hljs-subst">&#123;retrievedPost.Blog.Id&#125;</span>&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>csahrp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asp.net</tag>
      
      <tag>microsoft</tag>
      
      <tag>ef core</tag>
      
      <tag>sqlite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux tmux 基本操作</title>
    <link href="/2025/01/31/linux-tmux-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/01/31/linux-tmux-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="tmux-基本操作"><a href="#tmux-基本操作" class="headerlink" title="tmux 基本操作"></a>tmux 基本操作</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install tmux<br></code></pre></td></tr></table></figure><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux new -s &lt;session-name&gt;<br></code></pre></td></tr></table></figure><p>面命令会启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。</p><p>按下<code>Ctrl+d</code>或者显式输入<code>exit</code>命令，就可以退出 Tmux 窗口。</p><h2 id="Shortcut"><a href="#Shortcut" class="headerlink" title="Shortcut"></a>Shortcut</h2><p>Tmux 默认的前缀键是 <code>Ctrl+b</code>，即先按下 Ctrl+b，快捷键才会生效。</p><h2 id="New-session"><a href="#New-session" class="headerlink" title="New session"></a>New session</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmux new -s &lt;session-name&gt;<br></code></pre></td></tr></table></figure><h2 id="Detach-session"><a href="#Detach-session" class="headerlink" title="Detach session"></a>Detach session</h2><p>在 Tmux 窗口中，按下<code>Ctrl+b</code> <code>d</code>或者输入：<code>tmux detach</code>命令，就会将当前会话窗退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux detach<br></code></pre></td></tr></table></figure><p>上面命令执行后，就会退出当前 tmux 窗口，但是会话和里面的进程仍然在后台运行。</p><p><code>tmux ls</code>命令可以查看当前所有的 tmux 会话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># or</span><br>tmux list-session<br></code></pre></td></tr></table></figure><h2 id="Enter-session"><a href="#Enter-session" class="headerlink" title="Enter session"></a>Enter session</h2><p><code>tmux attach</code>命令用于重新接入某个已存在的会话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用会话编号</span><br>tmux attach -t 0    <span class="hljs-comment"># 0 是会话名称</span><br><span class="hljs-comment">#or</span><br>tmux a -t 0<br><span class="hljs-comment"># 使用会话名称</span><br>tmux attach -t &lt;session-name&gt;<br></code></pre></td></tr></table></figure><h2 id="Kill-session"><a href="#Kill-session" class="headerlink" title="Kill session"></a>Kill session</h2><p><code>tmux kill-session</code>命令用于杀死某个会话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用会话编号</span><br>tmux kill-session -t 0<br><span class="hljs-comment"># 使用会话名称</span><br>tmux kill-session -t &lt;session-name&gt;<br></code></pre></td></tr></table></figure><h2 id="Switch-session"><a href="#Switch-session" class="headerlink" title="Switch session"></a>Switch session</h2><p><code>tmux switch</code>命令用于切换会话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用会话编号</span><br>tmux switch -t 0<br><span class="hljs-comment"># 使用会话名称</span><br>tmux switch -t &lt;session-name&gt;<br></code></pre></td></tr></table></figure><h2 id="Rename-session"><a href="#Rename-session" class="headerlink" title="Rename session"></a>Rename session</h2><p><code>tmux rename-session</code>命令用于重命名会话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux rename-session -t 0 &lt;new-name&gt;<br></code></pre></td></tr></table></figure><h2 id="More-shortcuts"><a href="#More-shortcuts" class="headerlink" title="More shortcuts"></a>More shortcuts</h2><p>下面是一些会话相关的快捷键。</p><table><thead><tr><th>操作</th><th>Shell 命令</th></tr></thead><tbody><tr><td>新建会话</td><td><code>tmux [new -s 会话名 n 窗口名]</code></td></tr><tr><td>删除会话</td><td><code>tmux kill-session -t 会话名</code></td></tr><tr><td>恢复会话</td><td><code>tmux at [-t 会话名]</code></td></tr><tr><td>列出所有会话</td><td><code>tmux ls</code></td></tr><tr><td>关闭所有会话</td><td><code>tmux kill-server</code></td></tr></tbody></table><h3 id="控制会话"><a href="#控制会话" class="headerlink" title="控制会话"></a>控制会话</h3><table><thead><tr><th>操作</th><th>Tmux 命令</th></tr></thead><tbody><tr><td>会话重命名</td><td><code>:rename-session [新会话名]</code></td></tr><tr><td>新建会话</td><td><code>:new&lt;回车&gt;</code></td></tr><tr><td>离开(detach)当前会话</td><td><code>Ctrl+b d</code></td></tr><tr><td>列出所有会话</td><td><code>Ctrl+b s</code></td></tr><tr><td>重命名当前会话</td><td><code>Ctrl+b $</code></td></tr><tr><td>前往上一个会话</td><td><code>Ctrl+b (</code></td></tr><tr><td>前往下一个会话</td><td><code>Ctrl+b )</code></td></tr><tr><td><strong>预览会话及其从属的窗口</strong></td><td><code>Ctro+b w</code></td></tr><tr><td>向上滚动</td><td><code>Ctro+b PageUp</code>可多次按 PageUp</td></tr><tr><td>向下滚动</td><td><code>Ctro+b PageDown</code>可多次按 PageDown</td></tr></tbody></table><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><table><thead><tr><th>操作</th><th>Tmux 命令</th></tr></thead><tbody><tr><td>创建新窗口</td><td><code>Ctrl+b c</code></td></tr><tr><td>后一个窗口</td><td><code>Ctrl+b n</code></td></tr><tr><td>前一个窗口</td><td><code>Ctrl+b p</code></td></tr><tr><td>根据编号切换窗口</td><td><code>Ctrl+b 0..9</code></td></tr><tr><td>切换到最后一个窗口</td><td><code>Ctrl+b l</code></td></tr><tr><td>查找窗口</td><td><code>Ctrl+b f</code></td></tr><tr><td>重命名当前窗口</td><td><code>Ctrl+b ,</code></td></tr><tr><td>关闭当前窗口</td><td><code>Ctrl+b &amp;</code></td></tr></tbody></table><h3 id="窗格-面板-分割窗口"><a href="#窗格-面板-分割窗口" class="headerlink" title="窗格&#x2F;面板&#x2F;分割窗口"></a>窗格&#x2F;面板&#x2F;分割窗口</h3><table><thead><tr><th>操作</th><th>Tmux 命令</th></tr></thead><tbody><tr><td>垂直分割</td><td><code>Ctrl+b %</code></td></tr><tr><td>水平分割</td><td><code>Ctrl+b &quot;</code></td></tr><tr><td>交换窗格</td><td><code>Ctrl+b o</code></td></tr><tr><td>关闭窗格</td><td><code>Ctrl+b x</code></td></tr><tr><td>切换布局</td><td><code>Ctrl+b Space</code></td></tr><tr><td>显示每个窗格是第几个</td><td><code>Ctrl+b q</code></td></tr><tr><td>与上一个窗格交换位置</td><td><code>Ctrl+b &#123;</code></td></tr><tr><td>与下一个窗格交换位置</td><td><code>Ctrl+b &#125;</code></td></tr><tr><td>切换窗格最大化&#x2F;最小化</td><td><code>Ctrl+b z</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>software</tag>
      
      <tag>linux</tag>
      
      <tag>tmux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 添加环境变量</title>
    <link href="/2025/01/31/linux-ubuntu-%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2025/01/31/linux-ubuntu-%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-添加环境变量"><a href="#ubuntu-添加环境变量" class="headerlink" title="ubuntu 添加环境变量"></a>ubuntu 添加环境变量</h1><p>Ubuntu Linux系统环境变量配置文件：</p><p><code>/etc/profile</code> : 在登录时,操作系统定制用户环境时使用的第一个文件 ,此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。</p><p><code>/etc/environment</code> : 在登录时操作系统使用的第二个文件, 系统在读取你自己的profile前,设置环境文件的环境变量。</p><p><code>~/.profile</code> : 在登录时用到的第三个文件 是.profile文件,每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。</p><p><code>/etc/bashrc</code> : 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.</p><p><code>~/.bashrc</code> : 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。</p><h2 id="方法一：用户主目录下的-profile或-bashrc文件（推荐）"><a href="#方法一：用户主目录下的-profile或-bashrc文件（推荐）" class="headerlink" title="方法一：用户主目录下的.profile或.bashrc文件（推荐）"></a>方法一：用户主目录下的.profile或.bashrc文件（推荐）</h2><p><code>sudo vim ~/.profile</code></p><p>登录到你的用户（非root），在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">登录到你的用户（非root），在终端输入：<br><br>$ <span class="hljs-built_in">sudo</span> vim ~/.profile(or .bashrc)<br><br>可以在此文件末尾加入PATH的设置如下：<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:your path1:your path2 ...&quot;</span><br><br>保存文件，注销再登录，变量生效。<br>该方式添加的变量只对当前用户有效。<br></code></pre></td></tr></table></figure><p>添加PYTHONPATH的方法也是这样，在.bashrc中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PYTHONPATH=/home/kurumi/.local/lib/python3.8/site-packages:<span class="hljs-variable">$PYTHONPATH</span><br></code></pre></td></tr></table></figure><p>PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。保存后在终端输入 <code>source ~/.bashrc</code> 使<a href="https://so.csdn.net/so/search?q=%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">环境变量</a>立即生效.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>kurumi<span class="hljs-regexp">/.local/</span>lib<span class="hljs-regexp">/python3.8/</span>site-packages<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>python3.<span class="hljs-number">8</span>/dist-packages<br><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/python3/</span>dist-packages<br></code></pre></td></tr></table></figure><h2 id="方法二：系统目录下的profile文件"><a href="#方法二：系统目录下的profile文件" class="headerlink" title="方法二：系统目录下的profile文件"></a>方法二：系统目录下的profile文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">在系统的etc目录下，有一个profile文件，编辑该文件：<br><br>$ <span class="hljs-built_in">sudo</span> gedit /etc/profile<br><br>在最后加入PATH的设置如下：<br><br><span class="hljs-built_in">export</span> PATH=”<span class="hljs-variable">$PATH</span>:your path1:your path2 ...”<br><br>该文件编辑保存后，重启系统，变量生效。<br>该方式添加的变量对所有的用户都有效。<br><br>例：添加java：<br><span class="hljs-built_in">sudo</span> vim /etc/profile <br><br><span class="hljs-built_in">export</span> CLASS_PATH=./JAVA_HOME/lib:<span class="hljs-variable">$JAVA_HOME</span>/jre/lib<br><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h2 id="方法三：用于所有用户"><a href="#方法三：用于所有用户" class="headerlink" title="方法三：用于所有用户"></a>方法三：用于所有用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gedit /etc/profile<br></code></pre></td></tr></table></figure><p>加入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=&lt;你要加入的路径&gt;:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p><em>终端输入：<code>echo $PATH</code> 可以查看环境变量</em></p><h2 id="方法四：系统目录下的-environment-文件（谨慎）"><a href="#方法四：系统目录下的-environment-文件（谨慎）" class="headerlink" title="方法四：系统目录下的 environment 文件（谨慎）"></a>方法四：系统目录下的 environment 文件（谨慎）</h2><p>在系统的etc目录下，有一个environment文件，编辑该文件：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ sudo gedit /etc/environment<br><br>找到以下的 <span class="hljs-type">PATH</span> 变量：<br><br><span class="hljs-type">PATH</span>=&quot;&lt;......&gt;&quot;<br><br>修改该 <span class="hljs-type">PATH</span> 变量，在其中加入自己的<span class="hljs-type">path</span>即可，例如：<br><br><span class="hljs-type">PATH</span>=&quot;&lt;......&gt;:your path1:your path2 …&quot;<br><br>各个<span class="hljs-type">path</span>之间用冒号分割。该文件也是重启生效，影响所有用户。 <br>注意这里不是添加export <span class="hljs-type">PATH</span>=… 。<br></code></pre></td></tr></table></figure><h2 id="方法五：直接在终端下输入"><a href="#方法五：直接在终端下输入" class="headerlink" title="方法五：直接在终端下输入"></a>方法五：直接在终端下输入</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo <span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>:your path1:your path2 …&quot;</span><br></code></pre></td></tr></table></figure><p>这种方式变量立即生效，但用户注销或系统重启后设置变成无效，适合临时变量的设置。</p><h2 id="Trouble-shoot"><a href="#Trouble-shoot" class="headerlink" title="Trouble shoot"></a>Trouble shoot</h2><p>问题：因为不小心在 etc&#x2F;environment里设在环境变量导致无法登录</p><p>提示：不要在 <code>etc/environment</code>里设置 <code>export PATH</code>这样会导致重启后登录不了系统</p><p>解决方法：</p><p>在登录界面 <code>alt +ctrl+f1</code>进入命令模式，如果不是root用户需要键入（root用户就不许这么罗嗦，gedit编辑会不可显示）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/sudo /u</span>sr<span class="hljs-regexp">/bin/</span>vi <span class="hljs-regexp">/etc/</span>environment<br></code></pre></td></tr></table></figure><p>光标移到<code>export PATH**</code> 行，连续按 <code>d</code>两次删除该行；</p><p>输入<code>:wq</code>保存退出；</p><p>然后键入<code>/sbin/reboot</code>重启系统</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu安装搜狗输入法</title>
    <link href="/2025/01/31/linux-Ubuntu%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <url>/2025/01/31/linux-Ubuntu%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-安装搜狗输入法"><a href="#Ubuntu-安装搜狗输入法" class="headerlink" title="Ubuntu 安装搜狗输入法"></a>Ubuntu 安装搜狗输入法</h1><blockquote><p>本文图片来自搜狗官网</p></blockquote><p>搜狗官网指南：<a href="https://pinyin.sogou.com/linux/help.php">搜狗输入法 for linux 安装指南 (sogou.com)</a></p><h2 id="1、更新源"><a href="#1、更新源" class="headerlink" title="1、更新源"></a>1、更新源</h2><p>在终端执行 sudo apt update</p><h2 id="2、安装fcitx输入法框架"><a href="#2、安装fcitx输入法框架" class="headerlink" title="2、安装fcitx输入法框架"></a>2、安装fcitx输入法框架</h2><ol><li><p>在终端输入 <code>sudo apt install fcitx</code></p></li><li><p>设置fcitx为系统输入法</p></li></ol><p>点击左下角菜单选择语言支持，将语言选择为fcitx</p><p><img src="https://pinyin.sogou.com/linux/images/help8.png" alt="img"></p><ol start="3"><li>设置fcitx开机自启动</li></ol><p>在终端执行<code>sudo cp /usr/share/applications/fcitx.desktop /etc/xdg/autostart/</code></p><ol start="4"><li>卸载系统ibus输入法框架</li></ol><p>在终端执行 <code>sudo apt purge ibus</code></p><h2 id="3、安装搜狗输入法"><a href="#3、安装搜狗输入法" class="headerlink" title="3、安装搜狗输入法"></a>3、安装搜狗输入法</h2><ol><li><p>在官网下载搜狗输入法安装包，并安装，安装命令 sudo dpkg -i 安装包名</p></li><li><p>安装输入法依赖</p></li></ol><p>在终端执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install libqt5qml5 libqt5quick5 libqt5quickwidgets5 qml-module-qtquick2<br><br><span class="hljs-built_in">sudo</span> apt install libgsettings-qt1<br></code></pre></td></tr></table></figure><p><img src="https://pinyin.sogou.com/linux/images/help12.png" alt="img"></p><h2 id="4、重启电脑、调出输入法"><a href="#4、重启电脑、调出输入法" class="headerlink" title="4、重启电脑、调出输入法"></a>4、重启电脑、调出输入法</h2><p>1.重启电脑</p><p>2.查看右上角，可以看到“搜狗”字样，在输入窗口即可且出搜狗输入法。</p><p><img src="https://pinyin.sogou.com/linux/images/help13.png" alt="img"></p><ol start="3"><li>没有“搜狗”字样，选择配置，将搜狗加入输入法列表即可</li></ol><p><img src="https://pinyin.sogou.com/linux/images/help14.png" alt="img"></p><p><img src="https://pinyin.sogou.com/linux/images/help15.png" alt="img"></p><p>至此，搜狗输入法安装完毕</p><p><img src="https://pinyin.sogou.com/linux/images/help16.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>software</tag>
      
      <tag>ubuntu</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 快速开始配置</title>
    <link href="/2025/01/31/linux-Ubuntu%E5%BF%AB%E9%80%9F%E6%B8%A9%E9%A5%B1%E6%8C%87%E5%8D%97/"/>
    <url>/2025/01/31/linux-Ubuntu%E5%BF%AB%E9%80%9F%E6%B8%A9%E9%A5%B1%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-快速开始配置"><a href="#Ubuntu-快速开始配置" class="headerlink" title="Ubuntu 快速开始配置"></a>Ubuntu 快速开始配置</h1><h2 id="换源"><a href="#换源" class="headerlink" title="[换源]"></a>[换源]</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#添加阿里源</span><br>deb http<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br>deb<span class="hljs-punctuation">-</span>src http<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br>deb http<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br>deb<span class="hljs-punctuation">-</span>src http<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br>deb http<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br>deb<span class="hljs-punctuation">-</span>src http<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br>deb http<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br>deb<span class="hljs-punctuation">-</span>src http<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br>deb http<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br>deb<span class="hljs-punctuation">-</span>src http<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><br><span class="hljs-meta">#添加清华源</span><br>deb https<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="hljs-meta"># deb-src https:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br>deb https<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="hljs-meta"># deb-src https:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br>deb https<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="hljs-meta"># deb-src https:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br>deb https<span class="hljs-punctuation">:</span><span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="hljs-meta"># deb-src https:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse</span></span><br></code></pre></td></tr></table></figure><p>#更新源</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><h2 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> sai=<span class="hljs-string">&#x27;sudo apt install&#x27;</span><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -al&#x27;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sai=&#x27;sudo apt install&#x27;&quot;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ll=&#x27;ls -al&#x27;&quot;</span> &gt;&gt; ~/.zshrc<br></code></pre></td></tr></table></figure><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="[常用软件]"></a>[常用软件]</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install net-tools<br>sudo apt-get install curl git htop screen tmux<br>sudo apt-get install python3-dev python3-pip python3-setuptools<br>sudo apt-get install ffmpeg<br></code></pre></td></tr></table></figure><h2 id="pip-换源"><a href="#pip-换源" class="headerlink" title="[pip 换源]"></a>[pip 换源]</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建pip文件夹</span><br>sudo mkdir pip<br>cd pip<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建pip.cong文件</span><br>touch pip.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">编辑pip.conf文件</span><br>sudo vim pip.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">写入</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br><span class="hljs-attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><h2 id="pip"><a href="#pip" class="headerlink" title="[pip]"></a>[pip]</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> --upgrade pip<br>pip <span class="hljs-keyword">install</span> requests icecream rich<br></code></pre></td></tr></table></figure><h2 id="SSH"><a href="#SSH" class="headerlink" title="[SSH]"></a>[SSH]</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install openssh-server<br>sudo systemctl <span class="hljs-built_in">enable</span> ssh<br></code></pre></td></tr></table></figure><h2 id="Docker"><a href="#Docker" class="headerlink" title="[Docker]"></a>[Docker]</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">curl -<span class="hljs-variable">sSL</span> <span class="hljs-keyword">https</span>://<span class="hljs-built_in">get</span>.daocloud.io/docker | sh<br></code></pre></td></tr></table></figure><h2 id="zsh"><a href="#zsh" class="headerlink" title="[zsh]"></a>[zsh]</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install zsh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入 zsh</span><br>zsh<br><br>sh -c &quot;$(wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh -O -)&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">语法高亮</span><br>sudo apt install zsh-syntax-highlighting<br>echo &quot;source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &gt;&gt; ~/.zshrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">自动补全</span><br>git clone https://gitee.com/mattuy/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><p>然后修改 ~&#x2F;.zshrc</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">plugins</span><span class="hljs-operator">=</span>( <br>    zsh-autosuggestions<br>    z<br>    extract<br>)<br></code></pre></td></tr></table></figure><h2 id="thefuck"><a href="#thefuck" class="headerlink" title="thefuck"></a>thefuck</h2><p><code>thefuck</code> 是一个用于 Linux 和其他 Unix 类操作系统（包括 macOS）的命令行工具，它旨在帮助用户纠正他们输入错误的命令。当你在终端中输入了一个命令但拼写错误或使用了不正确的参数时，thefuck 可以自动识别并提供修正建议，只需再次运行该命令（通常通过简单地输入 fuck 并按下回车键），即可自动更正并重新执行你的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install thefuck<br><br></code></pre></td></tr></table></figure><p>把下面的加入.bashrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">eval $(thefuck --alias)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">You can use whatever you want as an <span class="hljs-built_in">alias</span>, like <span class="hljs-keyword">for</span> Mondays:</span><br>eval $(thefuck --alias FUCK)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者继续添加下面这句，启用自动确认</span><br>alias fuck=&#x27;fuck -y&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>linux</tag>
      
      <tag>dev</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 N_m3u8 的 m3u8dl 协议</title>
    <link href="/2025/01/31/soft-nm3u8/"/>
    <url>/2025/01/31/soft-nm3u8/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-N-m3u8-的-m3u8dl-协议"><a href="#使用-N-m3u8-的-m3u8dl-协议" class="headerlink" title="使用 N_m3u8 的 m3u8dl 协议"></a>使用 N_m3u8 的 m3u8dl 协议</h1><p>N_m3u8DL-CLI 是一个非常优秀的第三方 m3u8 文件合并下载工具。</p><p>下载 [N_m3u8DL-CLI](<a href="https://github.com/nilaoda/N_m3u8DL-CLI/releases">Releases · nilaoda&#x2F;N_m3u8DL-CLI (github.com)</a>)</p><p>解压后 建议 N_m3u8DL-CLI_v3.0.*.exe <strong>重命名为 m3u8dl.exe 或其他固定名称</strong>。否则每次更新版本都需要重新注册协议，以后更新 N_m3u8DL-CLI 只需修改文件名替换即可。</p><p><strong>以后每次调用协议下载，都是下载到注册此 exe 所在的文件夹</strong></p><p>使用cmd 运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">m3u8dl.exe --registerUrlProtocol<br></code></pre></td></tr></table></figure><p>检查是否完成，在浏览器地址栏输入 <code>m3u8dl:// </code>回车 是否有如下对话框</p><p><img src="https://pic1.imgdb.cn/item/679c2db2d0e0a243d4f8b9a8.png" alt="img"></p><p>看到此窗口，恭喜你已经完成了m3u8dl:&#x2F;&#x2F;协议的注册，之后在猫抓设置，开启 调用m3u8dl:&#x2F;&#x2F;协议下载m3u8 和 mpd 选项，你可以自定义修改调用参数，点击 查看参数说明 按钮查看所有参数列表。</p><p>如果猫抓嗅探到m3u8或mpd文件的存在，popup页面直接点击文件的下载按钮会直接调用N_m3u8DL-CLI下载</p>]]></content>
    
    
    <categories>
      
      <category>software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>m3u8</tag>
      
      <tag>nm3u8dl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 解析 TOML</title>
    <link href="/2025/01/26/csharp-parse-toml/"/>
    <url>/2025/01/26/csharp-parse-toml/</url>
    
    <content type="html"><![CDATA[<h1 id="C-解析-TOML"><a href="#C-解析-TOML" class="headerlink" title="C# 解析 TOML"></a>C# 解析 TOML</h1><h2 id="Tomlyn-库"><a href="#Tomlyn-库" class="headerlink" title="Tomlyn 库"></a>Tomlyn 库</h2><p><a href="https://github.com/xoofx/Tomlyn">xoofx&#x2F;Tomlyn: Tomlyn is a TOML parser, validator and authoring library for .NET Framework and .NET Core (github.com)</a></p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> toml = <span class="hljs-string">@&quot;global = &quot;&quot;this is a string&quot;&quot;</span><br><span class="hljs-string"># This is a comment of a table</span><br><span class="hljs-string">[my_table]</span><br><span class="hljs-string">key = 1 # Comment a key</span><br><span class="hljs-string">value = true</span><br><span class="hljs-string">list = [4, 5, 6]</span><br><span class="hljs-string">&quot;</span>;<br><br><span class="hljs-comment">// Parse the TOML string to the default runtime model `TomlTable`</span><br><span class="hljs-keyword">var</span> model = Toml.ToModel(toml);<br><span class="hljs-comment">// Fetch the string</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">global</span> = (<span class="hljs-built_in">string</span>)model[<span class="hljs-string">&quot;global&quot;</span>]!;<br><span class="hljs-comment">// Prints: found global = &quot;this is a string&quot;</span><br>Console.WriteLine(<span class="hljs-string">$&quot;found global = \&quot;<span class="hljs-subst">&#123;<span class="hljs-keyword">global</span>&#125;</span>\&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="解析列表"><a href="#解析列表" class="headerlink" title="解析列表"></a>解析列表</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[[path]]</span><br><span class="hljs-attr">src</span> = <span class="hljs-string">&#x27;E:\# Ultra File Folder&#x27;</span><br><span class="hljs-attr">dst</span> = <span class="hljs-string">&#x27;$:\# Ultra File Folder&#x27;</span><br><br><span class="hljs-section">[[path]]</span><br><span class="hljs-attr">src</span> = <span class="hljs-string">&#x27;E:\# Ultra File Folder 2133&#x27;</span><br><span class="hljs-attr">dst</span> = <span class="hljs-string">&#x27;$:\# Ultra File Folder 23123&#x27;</span><br></code></pre></td></tr></table></figure><p>解析：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Tomlyn.Model.TomlTable model;<br><br>model = Toml.ToModel(File.ReadAllText(...));<br><br>Tomlyn.Model.TomlTableArray paths = (Tomlyn.Model.TomlTableArray)model[<span class="hljs-string">&quot;path&quot;</span>]!;<br><br><span class="hljs-keyword">foreach</span>(Tomlyn.Model.TomlTable m <span class="hljs-keyword">in</span> paths)<br>&#123;<br>    <span class="hljs-comment">// do sth...</span><br>    <span class="hljs-comment">// extract vars</span><br>    <span class="hljs-built_in">string</span> src, dst, cmd;<br>    <span class="hljs-built_in">bool</span> enableNorm, enableBack;<br>    <span class="hljs-comment">// read vars</span><br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        src = (<span class="hljs-built_in">string</span>)(reverseDirection ? m[<span class="hljs-string">&quot;dst&quot;</span>] : m[<span class="hljs-string">&quot;src&quot;</span>]);<br>        dst = (<span class="hljs-built_in">string</span>)(reverseDirection ? m[<span class="hljs-string">&quot;src&quot;</span>] : m[<span class="hljs-string">&quot;dst&quot;</span>]);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception ex)<br>    &#123;<br>        Console.WriteLine(ex.Message);<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解析到类"><a href="#解析到类" class="headerlink" title="解析到类"></a>解析到类</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TomlModel <span class="hljs-title">Parse</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> toml</span>)</span><br>&#123;<br>    <span class="hljs-keyword">var</span> model = Toml.ToModel&lt;TomlModel&gt;(toml);<br>    <span class="hljs-keyword">return</span> model;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>toml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ASP.NET 最小 WebAPI 上传文件</title>
    <link href="/2025/01/26/asp-net-upload-file/"/>
    <url>/2025/01/26/asp-net-upload-file/</url>
    
    <content type="html"><![CDATA[<h1 id="ASP-NET-最小-WebAPI-上传文件"><a href="#ASP-NET-最小-WebAPI-上传文件" class="headerlink" title="ASP.NET 最小 WebAPI 上传文件"></a>ASP.NET 最小 WebAPI 上传文件</h1><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// accept upload image file</span><br>app.MapPost(<span class="hljs-string">&quot;/api/upload-img/&#123;id&#125;&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">async</span> <span class="hljs-title">Task</span>&lt;<span class="hljs-title">IResult</span>&gt; (<span class="hljs-params"><span class="hljs-built_in">int</span> id, HttpRequest request</span>)</span> =&gt;<br>&#123;<br>    Log.Information(<span class="hljs-string">&quot;Upload image request for id: &#123;0&#125;&quot;</span>, id);<br>    <span class="hljs-keyword">if</span> (!loginManager.IsLogin(request.HttpContext.GetIpAddress()))<br>    &#123;<br>        <span class="hljs-keyword">return</span> Results.Json(<span class="hljs-keyword">new</span> ServerAckDash()<br>        &#123;<br>            Success = <span class="hljs-literal">false</span>,<br>            Message = <span class="hljs-string">&quot;Not logged in&quot;</span><br>        &#125;);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (!request.HasFormContentType)<br>        <span class="hljs-keyword">return</span> Results.Json(<span class="hljs-keyword">new</span> ServerAckDash()<br>        &#123;<br>            Success = <span class="hljs-literal">false</span>,<br>            Message = <span class="hljs-string">&quot;Invalid content type&quot;</span><br>        &#125;);<br>    <br>    <span class="hljs-keyword">var</span> form = <span class="hljs-keyword">await</span> request.ReadFormAsync();<br><br>    <span class="hljs-keyword">if</span> (form.Files.Any() == <span class="hljs-literal">false</span>)<br>        <span class="hljs-keyword">return</span> Results.Json(<span class="hljs-keyword">new</span> ServerAckDash()<br>        &#123;<br>            Success = <span class="hljs-literal">false</span>,<br>            Message = <span class="hljs-string">&quot;No file found&quot;</span><br>        &#125;);<br><br>    <span class="hljs-keyword">var</span> <span class="hljs-keyword">file</span> = form.Files.FirstOrDefault();<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">file</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span> || <span class="hljs-keyword">file</span>.Length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> Results.Json(<span class="hljs-keyword">new</span> ServerAckDash()<br>        &#123;<br>            Success = <span class="hljs-literal">false</span>,<br>            Message = <span class="hljs-string">&quot;No file found&quot;</span><br>        &#125;);<br><br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">var</span> stream = <span class="hljs-keyword">file</span>.OpenReadStream();<br>    <br>    <span class="hljs-comment">// read image data</span><br>    <span class="hljs-built_in">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-keyword">file</span>.Length];<br>    <span class="hljs-keyword">await</span> stream.ReadAsync(data, <span class="hljs-number">0</span>, (<span class="hljs-built_in">int</span>)<span class="hljs-keyword">file</span>.Length);<br><br>    <span class="hljs-comment">// save image to file</span><br>    <span class="hljs-keyword">var</span> fileName = <span class="hljs-keyword">file</span>.FileName;<br>    Log.Information(<span class="hljs-string">&quot;Image file name: &#123;0&#125;&quot;</span>, fileName);<br><br>    <span class="hljs-keyword">var</span> storePath = Path.Combine(Directory.GetCurrentDirectory(), <span class="hljs-string">&quot;wwwroot&quot;</span>, <span class="hljs-string">&quot;customImg&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (!Directory.Exists(storePath))<br>    &#123;<br>        Directory.CreateDirectory(storePath);<br>    &#125;<br>    <br>    <span class="hljs-keyword">var</span> filePath = Path.Combine(storePath, fileName);<br>    <br>    Log.Information(<span class="hljs-string">&quot;Image will be write to &#123;0&#125;&quot;</span>, filePath);<br><br>    <span class="hljs-keyword">if</span> (File.Exists(filePath))<br>    &#123;<br>        File.Delete(filePath);<br>    &#125;<br>    <br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">var</span> fileStream = <span class="hljs-keyword">new</span> FileStream(filePath, FileMode.Create);<br>    <span class="hljs-keyword">await</span> fileStream.WriteAsync(data, <span class="hljs-number">0</span>, data.Length);<br>    fileStream.Close();<br>    <span class="hljs-keyword">return</span> Results.Json(<span class="hljs-keyword">new</span> ServerAckDash()<br>    &#123;<br>        Success = <span class="hljs-literal">true</span>,<br>        Message = <span class="hljs-string">&quot;Image uploaded&quot;</span><br>    &#125;);<br>&#125;).Accepts&lt;IFormFile&gt;(<span class="hljs-string">&quot;multipart/form-data&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">uploadImage</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>    <span class="hljs-keyword">const</span> fileInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;bg-input&#x27;</span>);<br>    <span class="hljs-keyword">const</span> file = fileInput.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 获取选中的文件</span><br>    formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;file&#x27;</span>, file); <span class="hljs-comment">// 将文件添加到FormData对象中</span><br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/upload-img/&#x27;</span> + id, &#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">body</span>: formData <span class="hljs-comment">// 设置请求体为FormData对象</span><br>    &#125;)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (data.<span class="hljs-property">success</span>) &#123;<br>            <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Image uploaded!&#x27;</span>, <span class="hljs-attr">text</span>: data.<span class="hljs-property">message</span> &#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Image upload failed!&#x27;</span>, <span class="hljs-attr">text</span>: data.<span class="hljs-property">message</span> &#125;);<br>        &#125;<br>    &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error));<br>&#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>asp.net</tag>
      
      <tag>microsoft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ASP.NET Blazor 添加 WebAPI 支持</title>
    <link href="/2025/01/26/blazor-add-api/"/>
    <url>/2025/01/26/blazor-add-api/</url>
    
    <content type="html"><![CDATA[<h1 id="ASP-NET-Blazor-添加-WebAPI-支持"><a href="#ASP-NET-Blazor-添加-WebAPI-支持" class="headerlink" title="ASP.NET Blazor 添加 WebAPI 支持"></a>ASP.NET Blazor 添加 WebAPI 支持</h1><h2 id="Program-cs"><a href="#Program-cs" class="headerlink" title="Program.cs"></a>Program.cs</h2><p>添加服务</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">builder.Services.AddControllers();<br></code></pre></td></tr></table></figure><p>添加控制器</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// add support for web api</span><br>app.MapControllers();<br></code></pre></td></tr></table></figure><p>Program.cs 完整代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> BlazorApiTest.Components;<br><br><span class="hljs-keyword">var</span> builder = WebApplication.CreateBuilder(<span class="hljs-keyword">args</span>);<br><br><span class="hljs-comment">// Add services to the container.</span><br>builder.Services.AddRazorComponents()<br>    .AddInteractiveServerComponents();<br><br><span class="hljs-comment">// add support for web api</span><br>builder.Services.AddControllers();<br><br><span class="hljs-keyword">var</span> app = builder.Build();<br><br><span class="hljs-comment">// Configure the HTTP request pipeline.</span><br><span class="hljs-keyword">if</span> (!app.Environment.IsDevelopment())<br>&#123;<br>    app.UseExceptionHandler(<span class="hljs-string">&quot;/Error&quot;</span>, createScopeForErrors: <span class="hljs-literal">true</span>);<br>&#125;<br><br>app.UseStaticFiles();<br>app.UseAntiforgery();<br><br>app.MapRazorComponents&lt;App&gt;()<br>    .AddInteractiveServerRenderMode();<br><br><span class="hljs-comment">// add support for web api</span><br>app.MapControllers();<br><br>app.Run();<br></code></pre></td></tr></table></figure><h2 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h2><p>创建 <code>Controllers/BasicController.cs</code> 名称任意</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Microsoft.AspNetCore.Mvc;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">BlazorApiTest.Controllers</span>;<br><br>[<span class="hljs-meta">Route(<span class="hljs-string">&quot;api/&quot;</span>)</span>]<br>[<span class="hljs-meta">ApiController</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BasicController</span>: <span class="hljs-title">Controller</span><br>&#123;<br>    [<span class="hljs-meta">HttpGet(<span class="hljs-string">&quot;test&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">Get</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动程序访问 <code>/api/test</code> 即可看到正确回显 <code>Hello, World!</code></p><p>或者，使用约定的路由方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Microsoft.AspNetCore.Mvc;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">BlazorApiTest.Controllers</span>;<br><br>[<span class="hljs-meta">Route(<span class="hljs-string">&quot;api/[controller]/[action]&quot;</span>)</span>]<br>[<span class="hljs-meta">ApiController</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BasicController</span>: <span class="hljs-title">Controller</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">Hello</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, World! From Hello() method&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">Goodbye</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Goodbye, World! From Goodbye() method&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，访问 <code>/api/Basic/Hello</code> 和 <code>/api/Basic/Goodbye</code> 可看到对应的输出</p>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>asp.net</tag>
      
      <tag>blazor</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10 删除文件显示找不到该项目</title>
    <link href="/2025/01/25/windows-delete-file-err/"/>
    <url>/2025/01/25/windows-delete-file-err/</url>
    
    <content type="html"><![CDATA[<h1 id="Win10-删除一个文件显示找不到该项目"><a href="#Win10-删除一个文件显示找不到该项目" class="headerlink" title="Win10 删除一个文件显示找不到该项目"></a>Win10 删除一个文件显示<code>找不到该项目</code></h1><p>现象：在 explorer 中，选中一个文件，按下 <code>Shift+Delete</code>，弹窗提示<code>找不到该项目</code>。在此目录下使用 <code>dir</code> 命令，可以看到文件存在。</p><h2 id="用批处理"><a href="#用批处理" class="headerlink" title="用批处理"></a>用批处理</h2><p>打开空白文档，输入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">DEL /F /A /Q \\?\%1<br>RD /S /Q \\?\%1<br></code></pre></td></tr></table></figure><p>将文本文档另存为 .bat 文件</p><p>将需要删除的文件夹拖拽到 bat 批处理文件上即可完成删除</p><h2 id="用git-bash"><a href="#用git-bash" class="headerlink" title="用git bash"></a>用git bash</h2><p>输入命令 <code>rm -rf 文件名</code></p><h2 id="放文件"><a href="#放文件" class="headerlink" title="放文件"></a>放文件</h2><p>在文件夹内放一个文件，再删除文件夹</p>]]></content>
    
    
    <categories>
      
      <category>software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>microsoft</tag>
      
      <tag>troubleshoot</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 打开网址</title>
    <link href="/2025/01/25/csharp-open-url/"/>
    <url>/2025/01/25/csharp-open-url/</url>
    
    <content type="html"><![CDATA[<h1 id="C-打开网址-Process-Start-for-URLs-txt"><a href="#C-打开网址-Process-Start-for-URLs-txt" class="headerlink" title="C# 打开网址 Process Start for URLs.txt"></a>C# 打开网址 Process Start for URLs.txt</h1><p>Apparently .NET Core is sort of broken when it comes to opening a URL via <code>Process.Start</code>. Normally you’d expect to do this:</p><p><code>Process.Start(&quot;http://google.com&quot;)</code><br>And then the default system browser pops open and you’re good to go. But this open issue explains that this doesn’t work on .NET Core. So instead you have to do this (credit goes to Eric Mellino):</p><h2 id="solution-1-tested"><a href="#solution-1-tested" class="headerlink" title="solution 1 (tested)"></a>solution 1 (tested)</h2><p>use simple one</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Process.Start(<span class="hljs-keyword">new</span> ProcessStartInfo() <br>              &#123;<br>                  FileName = <span class="hljs-string">&quot;cmd&quot;</span>,<br>                  Arguments = <span class="hljs-string">&quot;/c start &quot;</span> + url,<br>                  UseShellExecute = <span class="hljs-literal">false</span>,<br>                  WindowStyle = ProcessWindowStyle.Hidden,<br>                  CreateNoWindow = <span class="hljs-literal">true</span>,<br>              &#125;);<br></code></pre></td></tr></table></figure><p>or the long one</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenBrowser</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> url</span>)</span><br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        Process.Start(url);<br>    &#125;<br>    <span class="hljs-keyword">catch</span><br>    &#123;<br>        <span class="hljs-comment">// hack because of this: https://github.com/dotnet/corefx/issues/10361</span><br>        <span class="hljs-keyword">if</span> (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))<br>        &#123;<br>            url = url.Replace(<span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;^&amp;&quot;</span>);<br>            Process.Start(<span class="hljs-keyword">new</span> ProcessStartInfo(<span class="hljs-string">&quot;cmd&quot;</span>, <span class="hljs-string">$&quot;/c start <span class="hljs-subst">&#123;url&#125;</span>&quot;</span>) &#123; CreateNoWindow = <span class="hljs-literal">true</span> &#125;);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))<br>        &#123;<br>            Process.Start(<span class="hljs-string">&quot;xdg-open&quot;</span>, url);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))<br>        &#123;<br>            Process.Start(<span class="hljs-string">&quot;open&quot;</span>, url);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">throw</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="solution-2-tested"><a href="#solution-2-tested" class="headerlink" title="solution 2 (tested)"></a>solution 2 (tested)</h2><p>This was an intentional breaking change in .Net Core. Specifically, <code>UseShellExecute</code>, which is required to be <code>true</code> for your code to work, <a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.useshellexecute">defaults to <code>true</code> on .Net Framework, but it’s <code>false</code> on .Net Core</a>. This means the following code will work on both frameworks:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Process.Start(<span class="hljs-keyword">new</span> ProcessStartInfo(<span class="hljs-string">&quot;https://www.google.com&quot;</span>) &#123; UseShellExecute = <span class="hljs-literal">true</span> &#125;);<br></code></pre></td></tr></table></figure><h2 id="solution-3"><a href="#solution-3" class="headerlink" title="solution 3"></a>solution 3</h2><p><strong><a href="https://github.com/dsplaisted">dsplaisted</a></strong> commented <a href="https://github.com/dotnet/runtime/issues/28005#issuecomment-442214248">on Nov 28, 2018</a></p><p>I believe the currently recommended workaround is to set <code>UseShellExecute</code> to true:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">ProcessStartInfo psi = <span class="hljs-keyword">new</span> ProcessStartInfo<br>&#123;<br>    FileName = url,<br>    UseShellExecute = <span class="hljs-literal">true</span><br>&#125;;<br>Process.Start (psi);<br></code></pre></td></tr></table></figure><p><strong><a href="https://github.com/clairernovotny">clairernovotny</a></strong> commented <a href="https://github.com/dotnet/runtime/issues/28005#issuecomment-442214640">on Nov 28, 2018</a> • edited </p><p>You need this instead</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">ProcessStartInfo psi = <span class="hljs-keyword">new</span> ProcessStartInfo<br>&#123;<br>    FileName = <span class="hljs-string">&quot;cmd&quot;</span>,<br>    Arguments = <span class="hljs-string">&quot;/c start https://www.baidu.com/s?wd=beijing%20time&quot;</span><br>&#125;;<br>Process.Start(psi);<br></code></pre></td></tr></table></figure><p>Which is ugly…and more likely to bite people, I think.</p><p><strong><a href="https://github.com/clairernovotny">clairernovotny</a></strong> commented <a href="https://github.com/dotnet/runtime/issues/28005#issuecomment-442217271">on Nov 28, 2018</a></p><p>Actually it’s worse than that, here’s what you need to do it right <strong>so no cmd window appears</strong>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> psi = <span class="hljs-keyword">new</span> ProcessStartInfo<br>&#123;<br>    FileName = <span class="hljs-string">&quot;cmd&quot;</span>,<br>    WindowStyle = ProcessWindowStyle.Hidden,<br>    UseShellExecute = <span class="hljs-literal">false</span>,<br>    CreateNoWindow = <span class="hljs-literal">true</span>,<br>    Arguments = <span class="hljs-string">$&quot;/c start <span class="hljs-subst">&#123;link.AbsoluteUri&#125;</span>&quot;</span><br>&#125;;<br>Process.Start(psi);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>microsoft</tag>
      
      <tag>dotnet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# bitmap 图片编码及压缩参数</title>
    <link href="/2025/01/25/csharp-images/"/>
    <url>/2025/01/25/csharp-images/</url>
    
    <content type="html"><![CDATA[<h1 id="C-bitmap图片编码及压缩参数"><a href="#C-bitmap图片编码及压缩参数" class="headerlink" title="C# bitmap图片编码及压缩参数"></a>C# bitmap图片编码及压缩参数</h1><h2 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Image img = Image.FromFile(imgFile);<br></code></pre></td></tr></table></figure><h2 id="ImageCodecInfo-帮助方法"><a href="#ImageCodecInfo-帮助方法" class="headerlink" title="ImageCodecInfo 帮助方法"></a>ImageCodecInfo 帮助方法</h2><p>简写：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ImageCodecInfo <span class="hljs-title">GetEncoder</span>(<span class="hljs-params">ImageFormat format</span>)</span><br>&#123;<br>    <span class="hljs-keyword">var</span> codecs = ImageCodecInfo.GetImageDecoders();<br>    <span class="hljs-keyword">return</span> codecs.FirstOrDefault(codec =&gt; codec.FormatID == format.Guid);<br>&#125;<br></code></pre></td></tr></table></figure><p>原始</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> ImageCodecInfo <span class="hljs-title">GetEncoder</span>(<span class="hljs-params">ImageFormat format</span>)</span><br>&#123;<br>    ImageCodecInfo[] codecs = ImageCodecInfo.GetImageEncoders();<br><br>    <span class="hljs-keyword">foreach</span> (ImageCodecInfo codec <span class="hljs-keyword">in</span> codecs)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (codec.FormatID == format.Guid)<br>        &#123;<br>            <span class="hljs-keyword">return</span> codec;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="编码及压缩"><a href="#编码及压缩" class="headerlink" title="编码及压缩"></a>编码及压缩</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Bitmap target = <span class="hljs-keyword">new</span> Bitmap(width, height);<br><br><span class="hljs-comment">// format and encoder</span><br><span class="hljs-comment">// the format is used by the encoder</span><br><span class="hljs-comment">// to generate ImageCodecInfo</span><br>ImageFormat format = ImageFormat.Jpeg;<br>ImageCodecInfo encoder = GetEncoder(format);<br><br><span class="hljs-comment">// Bitmap.Save takes the EncoderParameters,</span><br><span class="hljs-comment">// but what we make is a EncoderParameter, no &quot;s&quot; at the end.</span><br><span class="hljs-comment">// use EncoderParameters.Param[0] to assign</span><br>EncoderParameters pm = <span class="hljs-keyword">new</span> EncoderParameters(<span class="hljs-number">1</span>);<br>pm.Param[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> EncoderParameter(Encoder.Quality, <span class="hljs-number">80L</span>);<br><br><span class="hljs-built_in">string</span> filename = ...<br>target.Save(filename, encoder, pm);<br></code></pre></td></tr></table></figure><h2 id="附：裁剪图片"><a href="#附：裁剪图片" class="headerlink" title="附：裁剪图片"></a>附：裁剪图片</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Rectangle cropRect = <span class="hljs-keyword">new</span> Rectangle(x, y, width, height);<br><br>Bitmap target = <span class="hljs-keyword">new</span> Bitmap(width, height);<br>Graphics g = Graphics.FromImage(target);<br>g.DrawImage(img, <br>            <span class="hljs-keyword">new</span> Rectangle(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, target.Width, target.Height),<br>            cropRect,<br>            GraphicsUnit.Pixel);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>microsoft</tag>
      
      <tag>dotnet</tag>
      
      <tag>cv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 弹窗获取文件等</title>
    <link href="/2025/01/25/csharp-popups/"/>
    <url>/2025/01/25/csharp-popups/</url>
    
    <content type="html"><![CDATA[<h1 id="C-弹窗获取文件等"><a href="#C-弹窗获取文件等" class="headerlink" title="C#弹窗获取文件等"></a>C#弹窗获取文件等</h1><h2 id="Winform获取文件"><a href="#Winform获取文件" class="headerlink" title="Winform获取文件"></a>Winform获取文件</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 文件选取 这里只允许txt文件</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    OpenFileDialog dialog = <span class="hljs-keyword">new</span> OpenFileDialog();<br>    dialog.Multiselect = <span class="hljs-literal">false</span>;   <span class="hljs-comment">//是否允许多选</span><br>    dialog.Title = <span class="hljs-string">&quot;请选择要处理的文件&quot;</span>;  <span class="hljs-comment">//窗口title</span><br>    dialog.Filter = <span class="hljs-string">&quot;文本文件(*.txt)|*.*&quot;</span>;   <span class="hljs-comment">//可选择的文件类型</span><br>    <span class="hljs-keyword">if</span> (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)<br>    &#123;<br>        <span class="hljs-built_in">string</span> path = dialog.FileName;  <span class="hljs-comment">//获取文件路径</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Winform另存为"><a href="#Winform另存为" class="headerlink" title="Winform另存为"></a>Winform另存为</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">SaveFileDialog savedialog = <span class="hljs-keyword">new</span> SaveFileDialog();<br>savedialog.Filter = <span class="hljs-string">&quot;Jpg 图片|*.jpg|Bmp 图片|*.bmp|Gif 图片|*.gif|Png 图片|*.png|Wmf  图片|*.wmf&quot;</span>;<br>savedialog.FilterIndex = <span class="hljs-number">0</span>;<br>savedialog.RestoreDirectory = <span class="hljs-literal">true</span>;<span class="hljs-comment">//保存对话框是否记忆上次打开的目录</span><br>savedialog.CheckPathExists = <span class="hljs-literal">true</span>;<span class="hljs-comment">//检查目录</span><br>savedialog.FileName = System.DateTime.Now.ToString(<span class="hljs-string">&quot;yyyyMMddHHmmss&quot;</span>) + <span class="hljs-string">&quot;-&quot;</span>; ;<span class="hljs-comment">//设置默认文件名</span><br><span class="hljs-keyword">if</span> (savedialog.ShowDialog() == DialogResult.OK)<br>&#123;<br>    image.Save(savedialog.FileName, System.Drawing.Imaging.ImageFormat.Jpeg);<span class="hljs-comment">// image为要保存的图片</span><br>    MessageBox.Show(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;图片保存成功！&quot;</span>, <span class="hljs-string">&quot;信息提示&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="WPF获取文件-Win32"><a href="#WPF获取文件-Win32" class="headerlink" title="WPF获取文件(Win32)"></a>WPF获取文件(Win32)</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// Microsoft.Win32.OpenFileDialog</span><br><span class="hljs-keyword">using</span> Microsoft.Win32;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ButtonBase_OnClick</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, RoutedEventArgs e</span>)</span><br>&#123;<br>    <span class="hljs-keyword">var</span> openFileDialog = <span class="hljs-keyword">new</span> OpenFileDialog();<br>    <span class="hljs-keyword">if</span> (openFileDialog.ShowDialog() == <span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-comment">// do something with the filename</span><br>        MessageBox.Show(openFileDialog.FileName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>You can also specify a filter, which will show only certain type of files, like this:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> openFileDialog = <span class="hljs-keyword">new</span> OpenFileDialog<br>&#123;<br>    Filter = <span class="hljs-string">&quot;Text files (*.txt)|*.txt|All files (*.*)|*.*&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="WPF另存为"><a href="#WPF另存为" class="headerlink" title="WPF另存为"></a>WPF另存为</h2><p>SaveFileDialog类位于PresentationFramework.dll 的Microsoft.Win32命名空间</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ChooseSaveFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> title,<span class="hljs-built_in">string</span> initFolder</span>)</span><br>&#123;<br>    SaveFileDialog dlg = <span class="hljs-keyword">new</span> SaveFileDialog();<br>    dlg.Title = title;<br>    dlg.FileName = <span class="hljs-string">&quot;User.txt&quot;</span>; <span class="hljs-comment">// Default file name</span><br>    dlg.DefaultExt = <span class="hljs-string">&quot;.txt&quot;</span>; <span class="hljs-comment">// Default file extension</span><br>    dlg.Filter = <span class="hljs-string">&quot;Text documents|*.txt&quot;</span>; <span class="hljs-comment">// Filter files by extension</span><br>    dlg.InitialDirectory = initFolder;<br><br>    <span class="hljs-comment">// Process save file dialog box results</span><br>    <span class="hljs-keyword">if</span> (dlg.ShowDialog() == <span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> dlg.FileName;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="通用获取文件夹-Ookii"><a href="#通用获取文件夹-Ookii" class="headerlink" title="通用获取文件夹(Ookii)"></a>通用获取文件夹(Ookii)</h2><p>Another typical case is when you need the user to select a folder. This time a File Dialog won’t do the job and you’ll need something different. If you’ve ever used WinForms you’d probably know FolderBrowserDialog class. Unfortunately this is not available in WPF by default, but don’t worry, you can still solve this in at least 3 different ways:</p><ol><li>Add the System.Windows.Forms DLL and use the FolderBrowserDialog class</li><li>Install the <a href="https://www.nuget.org/packages/Ookii.Dialogs/">Ookii.Dialogs nuget</a> and use the VistaFolderBrowserDialog class</li><li>Install the <a href="https://www.nuget.org/packages/Microsoft.WindowsAPICodePack-Shell">Windows API Code Pack-Shell</a> and use the CommonOpenFileDialog class</li></ol><p>The one I use the most is the Ookii.Dialogs one which looks easier and simpler to me. Just use this snippet and you’re ready to go:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ButtonBase2_OnClick</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, RoutedEventArgs e</span>)</span><br>&#123;<br>    <span class="hljs-keyword">var</span> ookiiDialog = <span class="hljs-keyword">new</span> VistaFolderBrowserDialog();<br>    <span class="hljs-keyword">if</span> (ookiiDialog.ShowDialog() == DialogResult.OK)<br>    &#123;<br>        <span class="hljs-comment">// do something with the folder path</span><br>        MessageBox.Show(ookiiDialog.SelectedPath);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>microsoft</tag>
      
      <tag>dotnet</tag>
      
      <tag>wpf</tag>
      
      <tag>winform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EF Core 快速开始</title>
    <link href="/2025/01/25/csharp-efcore/"/>
    <url>/2025/01/25/csharp-efcore/</url>
    
    <content type="html"><![CDATA[<h1 id="EF-Core-快速开始"><a href="#EF-Core-快速开始" class="headerlink" title="EF Core 快速开始"></a>EF Core 快速开始</h1><h2 id="安装ef包"><a href="#安装ef包" class="headerlink" title="安装ef包"></a>安装ef包</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Microsoft<span class="hljs-selector-class">.EntityFrameworkCore</span><span class="hljs-selector-class">.Sqlite</span><br>Microsoft<span class="hljs-selector-class">.EntityFrameworkCore</span>.Design<br></code></pre></td></tr></table></figure><p>注意不要安装成<code>Microsoft.EntityFrameworkCore.Sqlite.Core</code>最后带<strong>core</strong>结尾的不是。</p><h2 id="实体模型"><a href="#实体模型" class="headerlink" title="实体模型"></a>实体模型</h2><p>建个文件夹比如<strong>Db</strong>存放所有的实体模型。数据库Context类如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">EasyRepo.Db</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MainContext</span> : <span class="hljs-title">DbContext</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainContext</span>()</span><br>        &#123;<br>            <br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainContext</span>(<span class="hljs-params">DbContextOptions&lt;MainContext&gt; options</span>) : <span class="hljs-title">base</span>(<span class="hljs-params">options</span>)</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> DbSet&lt;ItemCategory&gt; ItemCategories &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> DbSet&lt;ItemProvider&gt; ItemProviders &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> DbSet&lt;InputItem&gt; InputItems &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-keyword">public</span> DbSet&lt;OutputItem&gt; OutputItems &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnConfiguring</span>(<span class="hljs-params">DbContextOptionsBuilder optionsBuilder</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!optionsBuilder.IsConfigured)<br>            &#123;<br>                optionsBuilder.UseSqlite(<span class="hljs-string">&quot;Data Source=data.db&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中一个实体类模板如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">EasyRepo.Db</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InputItem</span><br>    &#123;<br>        [<span class="hljs-meta">Key</span>]<br>        [<span class="hljs-meta">DatabaseGenerated(DatabaseGeneratedOption.Identity)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Id &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <br>        [<span class="hljs-meta">Required</span>]<br>        <span class="hljs-keyword">public</span> DateTime InputDate &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <br>        [<span class="hljs-meta">ForeignKey(<span class="hljs-string">&quot;CategoryId&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> ItemCategory Category &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <br>        [<span class="hljs-meta">AllowNull</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Itemname &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <br>        [<span class="hljs-meta">ForeignKey(<span class="hljs-string">&quot;ProviderId&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> ItemProvider Provider &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <br>        [<span class="hljs-meta">Required</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">decimal</span> Count &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <br>        [<span class="hljs-meta">Required</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">decimal</span> Price &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <br>        [<span class="hljs-meta">AllowNull</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Note &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意数据库一个表的外键必须使用诸如<strong>CategoryId</strong>这样的命名方式，否则迁移会报错。</p><h2 id="迁移数据"><a href="#迁移数据" class="headerlink" title="迁移数据"></a>迁移数据</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 新建迁移</span><br>dotnet ef migrations <span class="hljs-built_in">add</span> InitialCreate<br><br><span class="hljs-comment"># 开始创建数据库</span><br>dotnet ef database update<br><br><span class="hljs-comment"># 如果提示版本过低，升级 ef 工具版本</span><br>dotnet<span class="hljs-built_in"> tool </span>update --global dotnet-ef<br></code></pre></td></tr></table></figure><h2 id="不使用依赖注入"><a href="#不使用依赖注入" class="headerlink" title="不使用依赖注入"></a>不使用依赖注入</h2><p>如果不用类似ASP.NET那样的依赖注入来使用数据库，需要在 DbContext 同级目录下创建一个 <code>DesignTimeDbContextFactory.cs</code> 类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">EasyRepo.Db</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DesignTimeDbContextFactory</span> : <span class="hljs-title">IDesignTimeDbContextFactory</span>&lt;<span class="hljs-title">MainContext</span>&gt;<br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> MainContext <span class="hljs-title">CreateDbContext</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] <span class="hljs-keyword">args</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> optionsBuilder = <span class="hljs-keyword">new</span> DbContextOptionsBuilder&lt;MainContext&gt;();<br>            optionsBuilder.UseSqlite(<span class="hljs-string">&quot;Data Source=data.db&quot;</span>);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MainContext(optionsBuilder.Options);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样让ef工具正确识别如何新建数据库。</p>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>asp.net</tag>
      
      <tag>microsoft</tag>
      
      <tag>ef core</tag>
      
      <tag>dotnet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小米手环 4 手动同步 bin 表盘</title>
    <link href="/2025/01/25/diy-mi-band-4/"/>
    <url>/2025/01/25/diy-mi-band-4/</url>
    
    <content type="html"><![CDATA[<h1 id="小米手环-4-手动同步-bin-表盘"><a href="#小米手环-4-手动同步-bin-表盘" class="headerlink" title="小米手环 4 手动同步 bin 表盘"></a>小米手环 4 手动同步 bin 表盘</h1><h2 id="方法一（不推荐）"><a href="#方法一（不推荐）" class="headerlink" title="方法一（不推荐）"></a>方法一（不推荐）</h2><h3 id="1-小米运动下载一个表盘"><a href="#1-小米运动下载一个表盘" class="headerlink" title="1. 小米运动下载一个表盘"></a>1. 小米运动下载一个表盘</h3><p>从小米运动里随便找个表盘，记住找的哪一个，然后同步</p><h3 id="2-替换文件"><a href="#2-替换文件" class="headerlink" title="2. 替换文件"></a>2. 替换文件</h3><p>在</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">此电脑\<span class="hljs-type">Redmi</span> <span class="hljs-type">K30</span> <span class="hljs-type">Pro</span>\内部存储设备\<span class="hljs-type">Android</span>\<span class="hljs-class"><span class="hljs-keyword">data</span>\com.xiaomi.hm.health\files\watch_skin_local</span><br></code></pre></td></tr></table></figure><p>内找到刚下载的表盘，表盘是一个文件夹，名字类似<code>7ec60bf34ee7258203b9379495505706</code></p><p>打开里面有缩略图</p><h3 id="3-再次同步"><a href="#3-再次同步" class="headerlink" title="3. 再次同步"></a>3. 再次同步</h3><p>将文件夹内的bin替换成下载的第三方bin，回到小米运动app，打开刚才下的表盘，点击立即同步</p><h2 id="方法二（推荐）"><a href="#方法二（推荐）" class="headerlink" title="方法二（推荐）"></a>方法二（推荐）</h2><p>手动构造表盘文件夹，先随便新建个文件夹</p><h3 id="1-XML"><a href="#1-XML" class="headerlink" title="1. XML"></a>1. XML</h3><p>在文件夹内创建<code>infos.xml</code> XML 文件</p><p>名称为 <code>infos.xml</code>注意是 <strong>infos</strong> 不是 <strong>info</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">watch_skin_info</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">info</span>&gt;</span>&#123;&quot;O00000oO&quot;:&quot;表盘名称&quot;,&quot;O00000oo&quot;:0,&quot;O0000O0o&quot;:103587,&quot;O0000OOo&quot;:0,&quot;O0000Oo&quot;:false&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">info</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">watch_skin_info</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-图片"><a href="#2-图片" class="headerlink" title="2. 图片"></a>2. 图片</h3><p>相同目录下放入一个 <code>120X240</code> 的<code>png</code>格式图片用于预览图</p><h3 id="3-bin"><a href="#3-bin" class="headerlink" title="3. bin"></a>3. bin</h3><p>相同目录下放入下载的bin文件</p><h3 id="4-打包"><a href="#4-打包" class="headerlink" title="4. 打包"></a>4. 打包</h3><p>以上所有三个文件放入同一文件夹，把这个文件夹放到：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">此电脑\<span class="hljs-type">Redmi</span> <span class="hljs-type">K30</span> <span class="hljs-type">Pro</span>\内部存储设备\<span class="hljs-type">Android</span>\<span class="hljs-class"><span class="hljs-keyword">data</span>\com.xiaomi.hm.health\files\watch_skin_local</span><br></code></pre></td></tr></table></figure><h3 id="附：方法二自动打包，调用-aio-函数即可"><a href="#附：方法二自动打包，调用-aio-函数即可" class="headerlink" title="附：方法二自动打包，调用 aio 函数即可"></a>附：方法二自动打包，调用 <code>aio</code> 函数即可</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从网上下载符合要求的图片和 bin 文件，打开此程序</span><br><span class="hljs-string">输入文件名后自动处理打包</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> PySimpleGUI <span class="hljs-keyword">as</span> sg<br><br>HELP = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从网上下载符合要求的图片和 bin 文件，</span><br><span class="hljs-string">并放在此程序所在的文件夹，</span><br><span class="hljs-string">打开此程序，输入一个自定义的名字</span><br><span class="hljs-string">此软件自动处理打包</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br>XML = <span class="hljs-string">&quot;&quot;&quot;&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;&lt;watch_skin_info&gt;&lt;info&gt;&#123;&quot;O00000oO&quot;:&quot;&#123;&#123;NAME&#125;&#125;&quot;,&quot;O00000oo&quot;:0,&quot;O0000O0o&quot;:103587,&quot;O0000OOo&quot;:0,&quot;O0000Oo&quot;:false&#125;&lt;/info&gt;&lt;/watch_skin_info&gt;&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_xml</span>(<span class="hljs-params">folder, name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; generate the XML template and write it to XML file &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;folder&#125;</span>/infos.xml&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(XML.replace(<span class="hljs-string">&#x27;&#123;&#123;NAME&#125;&#125;&#x27;</span>, name))<br>        <br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">name_is_pic</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;check whether the file is picture</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    checks: &#x27;webp&#x27;, &#x27;jpg&#x27;, &#x27;jpeg&#x27;, &#x27;gif&#x27;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    ext = name.split(<span class="hljs-string">&#x27;.&#x27;</span>)[-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> ext <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&#x27;webp&#x27;</span>, <span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>, <span class="hljs-string">&#x27;gif&#x27;</span>&#125;:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_png</span>(<span class="hljs-params">folder</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 把图片后缀改成png &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> os.listdir(folder):<br>        <span class="hljs-comment"># base name</span><br>        name_without_ext = file.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># is picture</span><br>        <span class="hljs-keyword">if</span> name_is_pic(file):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[I] 转换图片: %s&#x27;</span> % file)<br>            os.system(<span class="hljs-string">f&#x27;magick &quot;<span class="hljs-subst">&#123;folder&#125;</span>\\<span class="hljs-subst">&#123;file&#125;</span>&quot; &quot;<span class="hljs-subst">&#123;folder&#125;</span>\\<span class="hljs-subst">&#123;name_without_ext&#125;</span>.png&quot;&#x27;</span>)<br>            <span class="hljs-comment"># list dirs again to check the num of png</span><br>            pngs = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir(folder) <span class="hljs-keyword">if</span> i.endswith(<span class="hljs-string">&#x27;.png&#x27;</span>)]<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(pngs) &gt; <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> pngs[<span class="hljs-number">1</span>:]:<br>                    os.remove(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;folder&#125;</span>\\<span class="hljs-subst">&#123;j&#125;</span>&#x27;</span>)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[I] 删除: %s&#x27;</span> % j)<br>            os.remove(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;folder&#125;</span>\\<span class="hljs-subst">&#123;file&#125;</span>&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[I] 删除: %s&#x27;</span> % file)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[X] 文件夹 %s 内没有图片文件。&#x27;</span> % folder)<br>            <br>    <br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aio</span>(<span class="hljs-params">skin_name</span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    give me the skin name and i will do all things, </span><br><span class="hljs-string">    return a str describe the status</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    skin = <span class="hljs-string">&#x27;no&#x27;</span><br>    pic = <span class="hljs-string">&#x27;no&#x27;</span><br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(skin_name):<br>            os.mkdir(skin_name)<br>            <br>    <span class="hljs-keyword">for</span> this_folder_file <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">&#x27;./&#x27;</span>):<br>        <span class="hljs-comment"># find Bin file!</span><br>        <span class="hljs-keyword">if</span> this_folder_file.endswith(<span class="hljs-string">&#x27;.bin&#x27;</span>):<br>            skin = <span class="hljs-string">&#x27;yes&#x27;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[I] 识别表盘：%s&#x27;</span> % this_folder_file)<br>            bin_file = this_folder_file<br>            <span class="hljs-comment"># move it</span><br>            shutil.move(bin_file, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;skin_name&#125;</span>/<span class="hljs-subst">&#123;bin_file&#125;</span>&#x27;</span>)<br>            <span class="hljs-comment"># generate template</span><br>            write_xml(skin_name, skin_name)<br>            <span class="hljs-comment"># whether to download picture</span><br>        <span class="hljs-keyword">elif</span> name_is_pic(this_folder_file):<br>            pic = <span class="hljs-string">&#x27;yes&#x27;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[I] 识别图片：%s&#x27;</span> % this_folder_file)<br>            <span class="hljs-comment"># move the picture to the directory</span><br>            shutil.move(this_folder_file, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;skin_name&#125;</span>\\<span class="hljs-subst">&#123;this_folder_file&#125;</span>&#x27;</span>)<br>            convert_png(skin_name)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;完成，检测到皮肤：<span class="hljs-subst">&#123;skin&#125;</span>，检测到图片：<span class="hljs-subst">&#123;pic&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gui</span>():<br>    f = (<span class="hljs-string">&#x27;微软雅黑&#x27;</span>, <span class="hljs-number">16</span>)<br>    sg.theme(<span class="hljs-string">&#x27;Dark&#x27;</span>)<br>    layout = [<br>        [sg.Text(<span class="hljs-string">&#x27;表盘名称&#x27;</span>, font=f),<br>         sg.InputText(key=<span class="hljs-string">&#x27;-NAME-&#x27;</span>, font=f, size=(<span class="hljs-number">20</span>, <span class="hljs-number">1</span>))],<br>        <br>        [sg.Text(<span class="hljs-string">&#x27;Ready&#x27;</span>, key=<span class="hljs-string">&#x27;-STATUS-&#x27;</span>, size=(<span class="hljs-number">30</span>, <span class="hljs-number">1</span>),font=f)],<br>        <br>        [sg.Button(<span class="hljs-string">&#x27;生成！&#x27;</span>, font=f),<br>         sg.Button(<span class="hljs-string">&#x27;退出&#x27;</span>, font=f), <br>         sg.Button(<span class="hljs-string">&#x27;帮助&#x27;</span>, font=f)]<br>    ]<br><br>    window = sg.Window(<span class="hljs-string">&#x27;小米手环4表盘生成器&#x27;</span>, layout)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        event, values = window.read()<br>        <span class="hljs-built_in">print</span>(event, values)<br>        <span class="hljs-keyword">if</span> event == sg.WIN_CLOSED <span class="hljs-keyword">or</span> event == <span class="hljs-string">&#x27;退出&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">elif</span> event == <span class="hljs-string">&#x27;生成！&#x27;</span>:<br>            text = values[<span class="hljs-string">&#x27;-NAME-&#x27;</span>]<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> text:<br>                window[<span class="hljs-string">&#x27;-STATUS-&#x27;</span>].update(<span class="hljs-string">&#x27;Skin name is required!&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br>            output = aio(text)<br>            window[<span class="hljs-string">&#x27;-STATUS-&#x27;</span>].update(output)<br>        <span class="hljs-keyword">elif</span> event == <span class="hljs-string">&#x27;帮助&#x27;</span>:<br>            sg.popup(<span class="hljs-string">&#x27;帮助&#x27;</span>, HELP, font=f)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># aio(&#x27;tttttttttttttt&#x27;)</span><br>    <span class="hljs-comment"># convert_png(&#x27;ProstoFace Orange&#x27;)</span><br>    gui()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>diy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>electronics</tag>
      
      <tag>diy</tag>
      
      <tag>mi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Robocopy实战文件备份</title>
    <link href="/2025/01/24/robocopy-in-real-action/"/>
    <url>/2025/01/24/robocopy-in-real-action/</url>
    
    <content type="html"><![CDATA[<h1 id="Robocopy实战文件备份"><a href="#Robocopy实战文件备份" class="headerlink" title="Robocopy实战文件备份"></a>Robocopy实战文件备份</h1><p><a href="https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/robocopy">robocopy | Microsoft Docs</a></p><p>robocopy 是 windows 系统自带的一个强大的命令行文件夹&#x2F;文件复制工具，它有非常多的参数可以配置。在数据同步中，robocopy 可用于编写自动同步脚本，如镜像同步目录 a 到目录 b，或增量同步 a 到 b 等，适合作为数据备份脚本。</p><h2 id="🔍robocopy-语法"><a href="#🔍robocopy-语法" class="headerlink" title="🔍robocopy 语法"></a>🔍robocopy 语法</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nix">robocopy <span class="hljs-symbol">&lt;source&gt;</span> <span class="hljs-symbol">&lt;destination&gt;</span> [<span class="hljs-symbol">&lt;file&gt;</span>[ ...]] [<span class="hljs-symbol">&lt;options&gt;</span>]<br><br>robocopy  原路径  目标路径  [文件[ ...]]  [选项]<br><br>如果路径中有空格，路径需要用英文引号包围。如 <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\m</span>y folder&quot;</span> 和 <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\h</span>is folder&quot;</span><br></code></pre></td></tr></table></figure><h2 id="🚀命令行参数速查"><a href="#🚀命令行参数速查" class="headerlink" title="🚀命令行参数速查"></a>🚀命令行参数速查</h2><h3 id="S"><a href="#S" class="headerlink" title="&#x2F;S"></a>&#x2F;S</h3><p><strong>常用于不希望删除目标目录的备份方式</strong></p><p>使用 <code>/s</code> 来完整复制子目录，相当于直接两个文件夹之间复制粘贴，也相当于 Linux 上的递归复制；</p><p>相同文件，被源目录替换；源目录多的文件，目标目录不受影响；</p><p>例：模拟把 D:\a 文件夹内所有文件复制，粘贴到 D:\b 文件夹下，并替换同名文件，&#x2F;MT:1 参数后面说明。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">robocopy <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\a</span>&quot;</span> <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\b</span>&quot;</span> <span class="hljs-symbol">/S</span> <span class="hljs-operator">/</span>MT:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="B"><a href="#B" class="headerlink" title="&#x2F;B"></a>&#x2F;B</h3><p><strong>不常用</strong>；</p><p>使用 <code>/b</code> 在备份模式下复制文件。 备份模式允许 Robocopy (ACL) 替代文件和文件夹权限设置。 这样，就可以复制你可能无权访问的文件，前提是该文件在具有足够权限的帐户下运行；</p><h3 id="MIR"><a href="#MIR" class="headerlink" title="&#x2F;MIR"></a>&#x2F;MIR</h3><p><strong>常用于镜像备份文件夹</strong>，目标文件夹会与源文件夹保持一致。</p><p>使用 <code>/mir</code> 来镜像复制，将此选项与 <strong>&#x2F;e</strong> 选项和目标目录结合使用，覆盖目标目录安全设置。</p><p>例：模拟把 D:\a 文件夹内所有文件复制，粘贴到 D:\b 文件夹下，并替换同名文件，并删除 b 内的多余文件。相当于让 b 完全保持与 a 相同的文件结构。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">robocopy <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\a</span>&quot;</span> <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\b</span>&quot;</span> <span class="hljs-symbol">/MIR</span> <span class="hljs-operator">/</span>MT:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="MT"><a href="#MT" class="headerlink" title="&#x2F;MT"></a>&#x2F;MT</h3><p>使用 <code>/mt:2</code> 指定复制时线程数为 2；</p><p><font color="red"><strong>重要：</strong></font> <strong>在一切机械硬盘，无论CMR垂直还是SMR叠瓦，都应当使用 &#x2F;MT:1 开启单线程写入</strong>；固态硬盘也推荐使用此参数。对于SMR叠瓦盘，不开启 &#x2F;MT:1 的默认 8 线程写入会大幅降低硬盘寿命；</p><h3 id="COPY"><a href="#COPY" class="headerlink" title="&#x2F;COPY"></a>&#x2F;COPY</h3><p><strong>若不希望用管理员身份执行robocopy，可添加 &#x2F;COPY:DT 参数</strong>，避免复制文件属性</p><p>使用 <code>/copy:flag</code> 指定要复制的文件属性。 此选项的有效值为：<strong>D</strong> - 数据<strong>A</strong> - 属性<strong>T</strong> - 时间戳<strong>S</strong> - NTFS 访问控制列表 (ACL)<strong>O</strong> - 所有者信息<strong>U</strong> - 审核信息此选项的默认值为 <strong>DAT</strong> (数据、属性和时间戳) 。</p><h2 id="📝重要规则-必读"><a href="#📝重要规则-必读" class="headerlink" title="📝重要规则(必读)"></a>📝重要规则(必读)</h2><p><font color="red"><strong>下面这些非常重要</strong></font></p><ul><li>在一切机械硬盘，无论CMR垂直还是SMR叠瓦，都必须添加 **&#x2F;MT:1 **参数开启单线程写入；</li><li>使用批处理时，文件编码<strong>必须为 ANSI, GBK 中的一种</strong>（GBK 和 ANSI 在 Windows 上等价）。</li><li><strong>使用管理员权限</strong>执行 robocopy 命令，或者使用 &#x2F;COPY:DT 参数规避文件属性复制；</li><li>在执行前，仔细检查 robocopy 命令，尤其是开启了 <strong>&#x2F;MIR</strong> 参数的命令，防止意外删除文件。在命令运行时，命令行会实时输出当前正在复制的源目录。若发现正在一行行输出的目录是自己的目标目录，说明设置反了方向，立即按下 <strong>Ctrl+C</strong> 终止命令；</li></ul><h2 id="🌎关于编码"><a href="#🌎关于编码" class="headerlink" title="🌎关于编码"></a>🌎关于编码</h2><p>使用记事本的<code>另存为</code>功能，可以选择为 ANSI 编码；</p><p>使用专业编辑器如 VS Code, Sublime Text, Notepad++ 等，则设置为 GBK 编码（不是 GB2312）。</p><p>若自己编写命令生成软件，则生成的批处理必须使用 GBK。</p><p>如在 Python 内通过向 open() 函数传递 <code>encoding=&quot;gbk&quot;</code> 来指名编码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;自动生成.bat&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;gbk&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&#x27;robocopy命令字符串&#x27;</span>)<br></code></pre></td></tr></table></figure><p>若在 C# 内，使用如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Text;<br><br>Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);<br><span class="hljs-built_in">string</span> finalCmd = <span class="hljs-string">&quot;robocopy命令字符串&quot;</span>;<br>System.IO.File.WriteAllText(<span class="hljs-string">&quot;自动生成.bat&quot;</span>, finalCmd, Encoding.GetEncoding(<span class="hljs-string">&quot;GBK&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="🗡️数据同步实战"><a href="#🗡️数据同步实战" class="headerlink" title="🗡️数据同步实战"></a>🗡️数据同步实战</h2><h3 id="文件夹单向同步"><a href="#文件夹单向同步" class="headerlink" title="文件夹单向同步"></a>文件夹单向同步</h3><p>例如，把 <code>D:\test</code> 镜像同步到 <code>E:\test</code> 下，这将保证 E:\test 与 D:\test 完全一致，来自 D 的文件将覆盖 E 的文件，E 中多余的文件将被删除，适用于文件夹的单向同步。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">robocopy <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\t</span>est&quot;</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\t</span>est&quot;</span> <span class="hljs-symbol">/MIR</span> <span class="hljs-operator">/</span>MT:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="文件夹同步到冷备份硬盘"><a href="#文件夹同步到冷备份硬盘" class="headerlink" title="文件夹同步到冷备份硬盘"></a>文件夹同步到冷备份硬盘</h3><p>把 <code>D:\test</code> 镜像同步到 <code>E:\test</code> 下。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">robocopy <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\t</span>est&quot;</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\t</span>est&quot;</span> <span class="hljs-symbol">/MIR</span> <span class="hljs-operator">/</span>MT:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="文件夹普通复制备份"><a href="#文件夹普通复制备份" class="headerlink" title="文件夹普通复制备份"></a>文件夹普通复制备份</h3><p>把 <code>D:\test</code> 普通同步到 <code>E:\test</code> 下，不删除不同的文件，等价于复制时选择替换重名文件 。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">robocopy <span class="hljs-string">&quot;D:<span class="hljs-char escape_">\t</span>est&quot;</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\t</span>est&quot;</span> <span class="hljs-symbol">/S</span> <span class="hljs-operator">/</span>MT:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="不复制文件的属性"><a href="#不复制文件的属性" class="headerlink" title="不复制文件的属性"></a>不复制文件的属性</h3><p>把 <code>D:\test</code> 镜像同步到 <code>E:\test</code> 下，使用 <code>/COPY:DT</code> 不保留文件的属性，适用于不使用管理员身份运行。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">robocopy <span class="hljs-string">&quot;D:\test&quot;</span> <span class="hljs-string">&quot;E:\test&quot;</span> <span class="hljs-string">/MIR</span> <span class="hljs-string">/COPY</span><span class="hljs-function">:DT</span> <span class="hljs-string">/MT</span><span class="hljs-function">:1</span><br></code></pre></td></tr></table></figure><p>使用以上命令时，可能遇到<strong>文件属性</strong>和<strong>无法找到文件</strong>的问题，如遇到则仍然使用<strong>管理员身份</strong>运行即可解决。</p><h2 id="部分选项"><a href="#部分选项" class="headerlink" title="部分选项"></a>部分选项</h2><table><thead><tr><th align="left">选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">&#x2F;s</td><td align="left">复制子目录。 此选项自动排除空目录。</td></tr><tr><td align="left">&#x2F;e</td><td align="left">复制子目录。 此选项自动包括空目录。</td></tr><tr><td align="left">&#x2F;lev：<code>&lt;n&gt;</code></td><td align="left">仅复制源目录树的前 <em>n</em> 个级别。</td></tr><tr><td align="left">&#x2F;z</td><td align="left">以可重启模式复制文件。 在可重启模式下，如果文件副本中断，Robocopy 可以选取它离开的位置，而不是重新复制整个文件。</td></tr><tr><td align="left">&#x2F;b</td><td align="left">在备份模式下复制文件。 备份模式允许 Robocopy (ACL) 替代文件和文件夹权限设置。 这样，就可以复制你可能无权访问的文件，前提是该文件在具有足够权限的帐户下运行。</td></tr><tr><td align="left">&#x2F;zb</td><td align="left">以可重启模式复制文件。 如果文件访问被拒绝，请切换到备份模式。</td></tr><tr><td align="left">&#x2F;j</td><td align="left">使用建议用于大型文件) 使用无缓冲区 I&#x2F;O (的副本。</td></tr><tr><td align="left">&#x2F;efsraw</td><td align="left">复制 EFS RAW 模式下的所有加密文件。</td></tr><tr><td align="left">&#x2F;copy：<code>&lt;copyflags&gt;</code></td><td align="left">指定要复制的文件属性。 此选项的有效值为：<strong>D</strong> - 数据<strong>A</strong> - 属性<strong>T</strong> - 时间戳<strong>S</strong> - NTFS 访问控制列表 (ACL)<strong>O</strong> - 所有者信息<strong>U</strong> - 审核信息此选项的默认值为 <strong>DAT</strong> (数据、属性和时间戳) 。</td></tr><tr><td align="left">&#x2F;dcopy：<code>&lt;copyflags&gt;</code></td><td align="left">指定要在目录中复制的内容。 此选项的有效值为：<strong>D</strong> - 数据<strong>A</strong> - 属性<strong>T</strong> - 时间戳此选项的默认值为 <strong>DA</strong> (数据和属性) 。</td></tr><tr><td align="left">&#x2F;秒</td><td align="left">复制安全 (等效 <strong>于 &#x2F;copy：DATS</strong>) 的文件。</td></tr><tr><td align="left">&#x2F;copyall</td><td align="left">复制与 <strong>&#x2F;copy：DATSOU</strong>) 等效的所有文件信息 (。</td></tr><tr><td align="left">&#x2F;nocopy</td><td align="left">复制任何文件信息， (<strong>&#x2F;purge</strong>) 很有用。</td></tr><tr><td align="left">&#x2F;secfix</td><td align="left">修复了所有文件的文件安全性，甚至跳过了这些文件。</td></tr><tr><td align="left">&#x2F;timfix</td><td align="left">修复了所有文件的文件时间，甚至跳过了这些文件。</td></tr><tr><td align="left">&#x2F;purge</td><td align="left">删除源中不再存在的目标文件和目录。 将此选项与 <strong>&#x2F;e</strong> 选项和目标目录结合使用，允许不覆盖目标目录安全设置。</td></tr><tr><td align="left">&#x2F;mir</td><td align="left">镜像与 <strong>&#x2F;e</strong> 和 <strong>&#x2F;purge</strong>) 等效的目录树 (。 将此选项与 <strong>&#x2F;e</strong> 选项和目标目录结合使用，覆盖目标目录安全设置。</td></tr><tr><td align="left">&#x2F;mov</td><td align="left">移动文件，并在复制文件后从源中删除这些文件。</td></tr><tr><td align="left">&#x2F;move</td><td align="left">移动文件和目录，并在复制这些文件和目录后从源中删除它们。</td></tr><tr><td align="left">&#x2F;a+：[RASHCNET]</td><td align="left">将指定的属性添加到复制的文件。 此选项的有效值为：<strong>R</strong> - 只读<strong>A</strong> - 存档<strong>S</strong> - 系统<strong>H</strong> - 隐藏<strong>C</strong> - 压缩<strong>N</strong> - 未编制索引的内容<strong>E</strong> - 加密<strong>T</strong> - 临时</td></tr><tr><td align="left">&#x2F;a-：[RASHCNET]</td><td align="left">从复制的文件中删除指定的属性。 此选项的有效值为：<strong>R</strong> - 只读<strong>A</strong> - 存档<strong>S</strong> - 系统<strong>H</strong> - 隐藏<strong>C</strong> - 压缩<strong>N</strong> - 未编制索引的内容<strong>E</strong> - 加密<strong>T</strong> - 临时</td></tr><tr><td align="left">&#x2F;create</td><td align="left">仅创建目录树和零长度文件。</td></tr><tr><td align="left">&#x2F;fat</td><td align="left">仅使用 8.3 个字符长度的 FAT 文件名创建目标文件。</td></tr><tr><td align="left">&#x2F;256</td><td align="left">关闭对超过 256 个字符的路径的支持。</td></tr><tr><td align="left">&#x2F;mon：<code>&lt;n&gt;</code></td><td align="left">监视源，并在检测到超过 <em>n 个</em> 更改时再次运行。</td></tr><tr><td align="left">&#x2F;mot：<code>&lt;m&gt;</code></td><td align="left">监视源，并在检测到更改时以 <em>m</em> 分钟为单位再次运行。</td></tr><tr><td align="left">&#x2F;mt<code>[:n]</code></td><td align="left">使用 <em>n</em> 个线程创建多线程副本。 <em>n</em> 必须是介于 1 和 128 之间的整数。 <em>n</em> 的默认值为 8。 为了提高性能，请使用 <strong>&#x2F;log</strong> 选项重定向输出。<strong>&#x2F;mt</strong> 参数不能与 <strong>&#x2F;ipg</strong> 和 <strong>&#x2F;efsraw</strong> 参数一起使用。</td></tr><tr><td align="left">&#x2F;rh：hhmm-hhmm</td><td align="left">指定可以启动新副本的运行时间。</td></tr><tr><td align="left">&#x2F;pf</td><td align="left">检查每个文件的运行时间， (不按传递) 。</td></tr><tr><td align="left">&#x2F;ipg：n</td><td align="left">指定数据包间差距，以在慢速线路上释放带宽。</td></tr><tr><td align="left">&#x2F;sj</td><td align="left">将连接 (软链接) 复制到目标路径而不是链接目标。</td></tr><tr><td align="left">&#x2F;sl</td><td align="left">不要关注符号链接，而是创建链接的副本。</td></tr><tr><td align="left">&#x2F;nodcopy</td><td align="left">(默认 <strong>&#x2F;dcopy：DA</strong>) 不复制任何目录信息。</td></tr><tr><td align="left">&#x2F;nooffload</td><td align="left">在不使用 Windows 复制卸载机制的情况下复制文件。</td></tr><tr><td align="left">&#x2F;compress</td><td align="left">请求文件传输期间的网络压缩（如果适用）。</td></tr></tbody></table><h2 id="退出-返回-代码"><a href="#退出-返回-代码" class="headerlink" title="退出 (返回) 代码"></a>退出 (返回) 代码</h2><table><thead><tr><th align="left">Value</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">未复制任何文件。 未遇到任何失败。 没有不匹配的文件。 目标目录中已存在这些文件;因此，跳过了复制操作。</td></tr><tr><td align="left">1</td><td align="left">已成功复制所有文件。</td></tr><tr><td align="left">2</td><td align="left">目标目录中存在一些其他文件，这些文件不在源目录中。 未复制任何文件。</td></tr><tr><td align="left">3</td><td align="left">复制了一些文件。 存在其他文件。 未遇到任何失败。</td></tr><tr><td align="left">5</td><td align="left">复制了一些文件。 某些文件不匹配。 未遇到任何失败。</td></tr><tr><td align="left">6</td><td align="left">存在其他文件和不匹配的文件。 未复制任何文件，也不会遇到任何故障。 这意味着文件已存在于目标目录中。</td></tr><tr><td align="left">7</td><td align="left">文件已复制，存在文件不匹配，并且存在其他文件。</td></tr><tr><td align="left">8</td><td align="left">多个文件未复制。</td></tr></tbody></table><h2 id="附：自动管理员身份运行"><a href="#附：自动管理员身份运行" class="headerlink" title="附：自动管理员身份运行"></a>附：自动管理员身份运行</h2><p>将以下命令复制到一个 bat 文件中，双击即可管理员身份运行。注意用 ANSI 或者 GBK 编码批处理文件。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-comment">rem ============固定模板1开始============</span><br>@<span class="hljs-built_in">ECHO</span> OFF<br><span class="hljs-built_in">setlocal</span> EnableDelayedExpansion<br><span class="hljs-built_in">PUSHD</span> %~DP0 &amp; <span class="hljs-built_in">cd</span> /d &quot;<span class="hljs-variable">%~dp0&quot;</span><br><span class="hljs-variable">%</span><span class="hljs-number">1</span> %<span class="hljs-number">2</span><br>mshta vbscript:createobject(&quot;shell.application&quot;).shellexecute(&quot;%~s0&quot;,&quot;<span class="hljs-keyword">goto</span> :target&quot;,&quot;&quot;,&quot;runas&quot;,<span class="hljs-number">1</span>)(window.close)&amp;<span class="hljs-keyword">goto</span> :eof<br>:target<br><span class="hljs-comment">rem ============固定模板1结束============</span><br><br><br>robocopy &quot;F:\转移文件\to&quot; &quot;F:\转移文件\from&quot; /MIR /MT:<span class="hljs-number">1</span><br>robocopy &quot;F:\转移文件\to1&quot; &quot;F:\转移文件\from1&quot; /MIR /MT:<span class="hljs-number">1</span><br><span class="hljs-built_in">echo</span> 所有目录均完成同步<br><span class="hljs-comment"></span><br><span class="hljs-comment">rem ============固定模板2开始============</span><br><span class="hljs-built_in">pause</span> &gt; <span class="hljs-built_in">nul</span><br><span class="hljs-keyword">exit</span><br><span class="hljs-comment">rem ============固定模板2结束============</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>robocopy</tag>
      
      <tag>backup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何规范你的 Git commit</title>
    <link href="/2025/01/24/git-commit-standard/"/>
    <url>/2025/01/24/git-commit-standard/</url>
    
    <content type="html"><![CDATA[<h1 id="如何规范你的Git-commit"><a href="#如何规范你的Git-commit" class="headerlink" title="如何规范你的Git commit"></a>如何规范你的Git commit</h1><p>本文为转载</p><p><a href="https://zhuanlan.zhihu.com/p/182553920">如何规范你的Git commit？ - 知乎 (zhihu.com)</a></p><h2 id="规范梳理"><a href="#规范梳理" class="headerlink" title="规范梳理"></a>规范梳理</h2><p>初期我们在互联网上搜索了大量有关git commit规范的资料，但只有Angular规范是目前使用最广的写法，比较合理和系统化，并且有配套的工具（IDEA就有插件支持这种写法）。最后综合阿里巴巴高德地图相关部门已有的规范总结出了一套git commit规范。</p><h3 id="commit-message格式"><a href="#commit-message格式" class="headerlink" title="commit message格式"></a>commit message格式</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;<br></code></pre></td></tr></table></figure><h3 id="type-必须"><a href="#type-必须" class="headerlink" title="type(必须)"></a>type(必须)</h3><p>用于说明git commit的类别，只允许使用下面的标识。</p><p><code>feat</code>：新功能（feature）。</p><p><code>fix/to</code>：修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 示例1</span><br><span class="hljs-function"><span class="hljs-title">fix</span><span class="hljs-params">(global)</span></span>:修复checkbox不能复选的问题<br><br><span class="hljs-comment">// 示例2 下面圆括号里的 common 为通用管理的名称</span><br><span class="hljs-function"><span class="hljs-title">fix</span><span class="hljs-params">(common)</span></span>: 修复字体过小的BUG，将通用管理下所有页面的默认字体大小修改为 <span class="hljs-number">14px</span><br><br><span class="hljs-comment">// 示例3</span><br>fix: value<span class="hljs-selector-class">.length</span> -&gt; values.length<br></code></pre></td></tr></table></figure><ul><li>fix：产生diff并自动修复此问题。适合于一次提交直接修复问题</li><li>to：只产生diff不自动修复此问题。适合于多次提交。最终修复问题提交时使用fix</li></ul><p><code>docs</code>：文档（documentation）。</p><p><code>style</code>：格式（不影响代码运行的变动）。</p><p><code>refactor</code>：重构（即不是新增功能，也不是修改bug的代码变动）。</p><p><code>perf</code>：优化相关，比如提升性能、体验。</p><p><code>test</code>：增加测试。</p><p><code>chore</code>：构建过程或辅助工具的变动。</p><p><code>revert</code>：回滚到上一个版本。</p><p><code>merge</code>：代码合并。</p><p><code>sync</code>：同步主线或分支的Bug。</p><h3 id="scope-可选"><a href="#scope-可选" class="headerlink" title="scope(可选)"></a>scope(可选)</h3><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><p>例如在Angular，可以是location，browser，compile，compile，rootScope， ngHref，ngClick，ngView等。如果你的修改影响了不止一个scope，你可以使用*代替。</p><h3 id="subject-必须"><a href="#subject-必须" class="headerlink" title="subject(必须)"></a>subject(必须)</h3><p>subject是commit目的的简短描述，不超过50个字符。</p><ul><li>结尾不加句号或其他标点符号。</li><li>根据以上规范git commit message将是如下的格式：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">fix(DAO):用户查询缺少username属性 <br>feat(Controller):用户查询接口开发<br></code></pre></td></tr></table></figure><p>以上就是我们梳理的git commit规范，那么我们这样规范git commit到底有哪些好处呢？</p><ul><li>便于程序员对提交历史进行追溯，了解发生了什么情况。</li><li>一旦约束了commit message，意味着我们将慎重的进行每一次提交，不能再一股脑的把各种各样的改动都放在一个git commit里面，这样一来整个代码改动的历史也将更加清晰。</li><li>格式化的commit message才可以用于自动化输出Change log。</li></ul>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>express.js 开发常见问题</title>
    <link href="/2025/01/24/js-express-problems/"/>
    <url>/2025/01/24/js-express-problems/</url>
    
    <content type="html"><![CDATA[<h1 id="express-js-开发常见问题"><a href="#express-js-开发常见问题" class="headerlink" title="express.js 开发常见问题"></a>express.js 开发常见问题</h1><h2 id="无法访问css、js等"><a href="#无法访问css、js等" class="headerlink" title="无法访问css、js等"></a>无法访问css、js等</h2><p>添加静态资源文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)));<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;public&#x27;</span>));<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;./&#x27;</span>));<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;.&#x27;</span>));<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>())<br></code></pre></td></tr></table></figure><h2 id="允许跨域"><a href="#允许跨域" class="headerlink" title="允许跨域"></a>允许跨域</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;X-Requested-With,Content-Type&#x27;</span>)<br>res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;GET,POST,OPTIONS&#x27;</span>)<br><span class="hljs-title function_">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="本机IP地址"><a href="#本机IP地址" class="headerlink" title="本机IP地址"></a>本机IP地址</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> os = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;os&#x27;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取当前机器的ip地址</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getIpAddress</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> ifaces = os.<span class="hljs-title function_">networkInterfaces</span>()<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> dev <span class="hljs-keyword">in</span> ifaces) &#123;<br><span class="hljs-keyword">let</span> iface = ifaces[dev]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; iface.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-keyword">let</span> &#123; family, address, internal &#125; = iface[i]<br><span class="hljs-keyword">if</span> (family === <span class="hljs-string">&#x27;IPv4&#x27;</span> &amp;&amp; address !== <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; !internal) &#123;<br><span class="hljs-keyword">return</span> address<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二维码命令行打印"><a href="#二维码命令行打印" class="headerlink" title="二维码命令行打印"></a>二维码命令行打印</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> qrcode = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;qrcode-terminal&#x27;</span>)<br><br>qrcode.<span class="hljs-title function_">generate</span>(<span class="hljs-string">`http://<span class="hljs-subst">$&#123;ip&#125;</span>:<span class="hljs-subst">$&#123;PORT&#125;</span>`</span>, &#123; <span class="hljs-attr">small</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></figure><h2 id="局域网无法访问"><a href="#局域网无法访问" class="headerlink" title="局域网无法访问"></a>局域网无法访问</h2><p>关闭系统防火墙，设置windows「专有网络」</p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>express.js</tag>
      
      <tag>node.js</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>edge浏览器非全屏看视频变灰</title>
    <link href="/2025/01/24/edge-gray-video/"/>
    <url>/2025/01/24/edge-gray-video/</url>
    
    <content type="html"><![CDATA[<h1 id="edge浏览器非全屏看视频变灰"><a href="#edge浏览器非全屏看视频变灰" class="headerlink" title="edge浏览器非全屏看视频变灰"></a>edge浏览器非全屏看视频变灰</h1><p>在线观看非全屏视频的时候，点击播放头两秒是正常的，紧接着就蒙上一层灰一样。然后点击其他标签页又切回来，又一个循环。</p><h2 id="D3D11on12"><a href="#D3D11on12" class="headerlink" title="D3D11on12"></a>D3D11on12</h2><p>edge 地址框输入 <code>edge://flags</code> 接着搜索 <code>Choose ANGLE graphics backend</code> 设置为 <code>D3D11on12</code></p><p><strong>注意：经过实测这个办法会导致浏览器意外崩溃</strong>，设置为 D3D9 即可避免问题出现。</p><h2 id="关闭增强"><a href="#关闭增强" class="headerlink" title="关闭增强"></a>关闭增强</h2><p>进入设置 - 隐私、搜索和服务 - 关掉在Edge中增强图像</p><h2 id="B站弹幕发白"><a href="#B站弹幕发白" class="headerlink" title="B站弹幕发白"></a>B站弹幕发白</h2><p>在 NGA 搜到的某方法，应该同时适用于 edge 和 chrome（毕竟内核相同）。地址栏输入 <code>edge://flags</code> 或 chrome:&#x2F;&#x2F;flags，搜索 <code>D3</code> ，出现下面这个选项。默认是 Default，经逐个测试发现，只有 D3D9 能让弹幕恢复正常。</p><h2 id="文字发白"><a href="#文字发白" class="headerlink" title="文字发白"></a>文字发白</h2><p>若网页文本图标颜色也很暗淡灰白，edge 地址框输入<code>edge://flags</code>接着搜索<code>Force color</code>设置为 <code>sRGB</code></p>]]></content>
    
    
    <categories>
      
      <category>software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>microsoft</tag>
      
      <tag>edge</tag>
      
      <tag>video</tag>
      
      <tag>internet</tag>
      
      <tag>troubleshoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 N_m3u8 的 m3u8dl 协议</title>
    <link href="/2025/01/24/nm3u8/"/>
    <url>/2025/01/24/nm3u8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文部分来自 csdn 等网络资源。</p></blockquote><h1 id="使用-N-m3u8-的-m3u8dl-协议"><a href="#使用-N-m3u8-的-m3u8dl-协议" class="headerlink" title="使用 N_m3u8 的 m3u8dl 协议"></a>使用 N_m3u8 的 m3u8dl 协议</h1><p>N_m3u8DL-CLI 非常优秀的第三方m3u8文件合并下载工具，支持HLS m3u8和DASH mpd</p><p>下载 [N_m3u8DL-CLI](<a href="https://github.com/nilaoda/N_m3u8DL-CLI/releases">Releases · nilaoda&#x2F;N_m3u8DL-CLI (github.com)</a>)</p><p>如果你电脑里没有安装ffmpeg 请下载 N_m3u8DL-CLI_v3.0.*_with_ffmpeg_and_SimpleG.zip</p><p>解压后 建议 N_m3u8DL-CLI_v3.0.*.exe <strong>重命名为 m3u8dl.exe 或其他固定名称</strong>。否则每次更新版本都需要重新注册协议，以后更新N_m3u8DL-CLI只需修改文件名替换即可。</p><p><strong>以后每次调用协议下载，都是下载到注册此 exe 所在的文件夹</strong></p><p>使用cmd 运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">m3u8dl.exe --registerUrlProtocol<br></code></pre></td></tr></table></figure><p>检查是否完成，在浏览器地址栏输入 <code>m3u8dl:// </code>回车 是否有如下对话框</p><p><img src="https://img-blog.csdnimg.cn/6912f7046114414aaf5e0798f7c3f5dd.jpeg" alt="img"></p><p>看到此窗口，恭喜你已经完成了m3u8dl:&#x2F;&#x2F;协议的注册，之后在猫抓设置，开启 调用m3u8dl:&#x2F;&#x2F;协议下载m3u8 和 mpd 选项，你可以自定义修改调用参数，点击 查看参数说明 按钮查看所有参数列表。</p><p><img src="https://img-blog.csdnimg.cn/4937858fcad24071af36111230625cad.jpeg" alt="img"></p><p>如果猫抓嗅探到m3u8或mpd文件的存在，popup页面直接点击文件的下载按钮会直接调用N_m3u8DL-CLI下载</p>]]></content>
    
    
    <categories>
      
      <category>software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>internet</tag>
      
      <tag>m3u8</tag>
      
      <tag>download</tag>
      
      <tag>opensource</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用FFmpeg调用NVIDIA GPU压制视频</title>
    <link href="/2025/01/24/ffmpeg-gpu/"/>
    <url>/2025/01/24/ffmpeg-gpu/</url>
    
    <content type="html"><![CDATA[<h1 id="使用FFmpeg调用NVIDIA-GPU压制视频"><a href="#使用FFmpeg调用NVIDIA-GPU压制视频" class="headerlink" title="使用FFmpeg调用NVIDIA GPU压制视频"></a>使用FFmpeg调用NVIDIA GPU压制视频</h1><ol><li>确保电脑显卡在此列表上：<a href="https://developer.nvidia.com/video-encode-and-decode-gpu-support-matrix-new">https://developer.nvidia.com/video-encode-and-decode-gpu-support-matrix-new</a></li><li>下载并安装 CUDA Toolkit：<a href="https://developer.nvidia.com/cuda-downloads">https://developer.nvidia.com/cuda-downloads</a></li><li>已下载最新版FFmpeg：<a href="https://ffmpeg.org/download.html">https://ffmpeg.org/download.html</a></li><li>执行命令查看所有可用的硬件加速器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -hwaccels<br></code></pre></td></tr></table></figure><p>这里可以看到，我们需要的 CUDA 已经有了。</p><p><img src="https://raw.githubusercontent.com/Shiikos/docs-img/main/20230227202905.png" alt="img"></p><p>执行命令查看查看编解码器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -codecs<br></code></pre></td></tr></table></figure><p><code>h264_nvenc</code>是<code>H.264</code>硬件编码器，<code>hevc_nvenc</code>是<code>H.265</code>硬件编码器</p><p><img src="https://raw.githubusercontent.com/Shiikos/docs-img/main/20230227203522.png" alt="img"></p><p>查看某一个编码器的帮助：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -h encoder=hevc_nvenc<br></code></pre></td></tr></table></figure><h2 id="压制命令"><a href="#压制命令" class="headerlink" title="压制命令"></a>压制命令</h2><p>2024-07-30 实测可行</p><p>部分硬件转码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -i input.mp4 -c:v hevc_nvenc -crf 23 -c:a copy -vtag hvc1 output.mp4<br><br><span class="hljs-comment"># -i 后填写输入素材的路径</span><br><span class="hljs-comment">#输入素材为H.265视频，-c:v 使用对应解码器hevc_nvenc；</span><br><span class="hljs-comment">#CRF中的质量的范围可以是1.0 - 51.0。一般设置21-25之间就可以，此值越大码率越低。</span><br><span class="hljs-comment">#声音流这里直接copy了，未压制。</span><br><span class="hljs-comment">#输出视频为H.265。</span><br></code></pre></td></tr></table></figure><p>全硬解码需要加上<code>-hwaccel cuda</code>，<strong>注意：nvenc 编码器不支持给crf设置数值，而是给-cq 或者 -qp 设置数值，效果同h264编码器的crf</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -hwaccel cuda -i input.mp4 -c:v hevc_nvenc -cq 23 -rc vbr -c:a copy -vtag hvc1 output.mp4<br></code></pre></td></tr></table></figure><p>直接指定码率：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -hwaccel cuda -i <span class="hljs-string">&quot;371-%elec.mp4&quot;</span> -c:v hevc_nvenc -b:v 1800k -c:a copy -vtag hvc1 <span class="hljs-string">&quot;371-%elec_comp.mp4&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>software</category>
      
    </categories>
    
    
    <tags>
      
      <tag>video</tag>
      
      <tag>ffmpeg</tag>
      
      <tag>nvidia</tag>
      
      <tag>gpu</tag>
      
      <tag>codec</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sublime text 配置 python 环境</title>
    <link href="/2025/01/24/python-sublime/"/>
    <url>/2025/01/24/python-sublime/</url>
    
    <content type="html"><![CDATA[<h1 id="Sublime-text-配置-python-环境"><a href="#Sublime-text-配置-python-环境" class="headerlink" title="Sublime text 配置 python 环境"></a>Sublime text 配置 python 环境</h1><h2 id="安装-python-lsp"><a href="#安装-python-lsp" class="headerlink" title="安装 python lsp"></a>安装 python lsp</h2><p>全局安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install python-lsp-server<br></code></pre></td></tr></table></figure><h2 id="配置-sublime-text"><a href="#配置-sublime-text" class="headerlink" title="配置 sublime text"></a>配置 sublime text</h2><p><a href="https://lsp.sublimetext.io/language_servers/#python">Language Servers - LSP for Sublime Text</a></p><p>安装包：</p><ul><li><code>LSP</code></li><li><code>LSP-json</code> （官方推荐的）</li><li><code>LSP-pyright</code></li></ul><p>重启 sublime，然后拖入一个 python 文件，可以看到状态栏左下角提示 <code>LSP-pyright intalling...</code> 等一会就好了 </p>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>sublime</tag>
      
      <tag>lsp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 显示中文和解决中文乱码</title>
    <link href="/2025/01/24/git-chinese-messy-code/"/>
    <url>/2025/01/24/git-chinese-messy-code/</url>
    
    <content type="html"><![CDATA[<h1 id="git-显示中文和解决中文乱码"><a href="#git-显示中文和解决中文乱码" class="headerlink" title="git 显示中文和解决中文乱码"></a>git 显示中文和解决中文乱码</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>将git配置文件 <code>core.quotepath</code>项设置为<code>false</code>。<code>quotepath</code>表示引用路径，加上<code>--global</code>表示全局配置</p><p><code>git bash</code>终端输入命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">git config --global core.quotepath false<br></code></pre></td></tr></table></figure><p>要注意的是，这样设置后，你的<code>git bash</code>终端也要设置成中文和<code>utf-8</code>编码。才能正确显示中文.</p><p>在<code>git bash</code>的界面中右击空白处，弹出菜单，选择<code>选项-&gt;文本-&gt;本地Locale</code>，设置为<code>zh_CN</code>，而旁边的字符集选框选为<code>UTF-8</code>。</p><p>英文显示则是：<br><code>Options-&gt;Text-&gt;Locale</code>改为<code>zh_CN</code>，<code>Character set</code>改为<code>UTF-8</code></p><p>如果你的git bash终端没有菜单选项显示，还可以通过直接修改配置文件的方式来解决中文乱码问题。</p><p>进入git的安装目录</p><p>编辑<code>etc\gitconfig</code>文件，也有些windows系统是存放在<code>C:\Users\Administrator\.gitconfig</code>路径或<code>安装盘符:\Git\mingw64\etc\gitconfig</code>，在文件末尾增加以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">[gui]  <br>    encoding = utf-8  <br>    # 代码库统一使用utf-8  <br>[i18n]  <br>    commitencoding = utf-8  <br>    # log编码  <br>[svn]  <br>    pathnameencoding = utf-8  <br>    # 支持中文路径  <br>[core]<br>    quotepath = false <br>    # status引用路径不再是八进制（反过来说就是允许显示中文了）<br></code></pre></td></tr></table></figure><p>编辑<code>etc\git-completion.bash</code>文件,在文件末尾增加以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text"># 让ls命令能够正常显示中文<br>alias ls=&#x27;ls --show-control-chars --color=auto&#x27; <br></code></pre></td></tr></table></figure><p>编辑<code>etc\inputrc</code>文件，修改<code>output-meta</code>和<code>convert-meta</code>属性值：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">set output-meta on  # bash可以正常输入中文  <br>set convert-meta off  <br></code></pre></td></tr></table></figure><p>编辑<code>profile</code>文件，在文件末尾添加如下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">export LESSHARESET=utf-8<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>dev</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vmware player不能复制粘贴怎么办</title>
    <link href="/2025/01/23/vmware-cannot-paste/"/>
    <url>/2025/01/23/vmware-cannot-paste/</url>
    
    <content type="html"><![CDATA[<h1 id="vmware-player不能复制粘贴怎么办"><a href="#vmware-player不能复制粘贴怎么办" class="headerlink" title="vmware player不能复制粘贴怎么办"></a>vmware player不能复制粘贴怎么办</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><blockquote><p>使用的是vmware 12 player， 虚拟机装的是ubuntu14.04, 主机是win10， 重新装过vm Tools后， 在主机复制内容，在虚拟机不能粘贴了，搞得很蛋疼，后来看到此种方法解决了。<a href="https://link.jianshu.com/?t=http://askubuntu.com/questions/691585/copy-paste-and-dragdrop-not-working-in-vmware-machine-with-ubuntu">Copy&#x2F;paste and drag&amp;drop not working in vmware machine with Ubuntu</a></p></blockquote><p>I had the same problem and found that this can be fixed by executing the following commands in Ubuntu :</p><ol><li><code>sudo apt-get autoremove open-vm-tools</code></li><li>Install VMware Tools by following the usual method (<strong>Virtual Machine –&gt; Reinstall VMWare Tools</strong>)</li><li>Reboot the VM</li><li><code>sudo apt-get install open-vm-tools-desktop</code></li><li>Reboot the VM, after the reboot copy&#x2F;paste and drag&#x2F;drop will work!</li></ol><h2 id="方法2（实测可用）"><a href="#方法2（实测可用）" class="headerlink" title="方法2（实测可用）"></a>方法2（实测可用）</h2><ol><li>Open Terminal</li><li><code>sudo apt install open-vm-tools-desktop</code></li><li>restart the guest operating system</li></ol><p>This seems to have fixed the copy-and-paste issue for me.</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>vmware</tag>
      
      <tag>virtual machine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装 zsh 和 oh-my-zsh</title>
    <link href="/2025/01/23/linux-oh-my-zsh/"/>
    <url>/2025/01/23/linux-oh-my-zsh/</url>
    
    <content type="html"><![CDATA[<h1 id="安装-zsh-和-oh-my-zsh"><a href="#安装-zsh-和-oh-my-zsh" class="headerlink" title="安装 zsh 和 oh-my-zsh"></a>安装 zsh 和 oh-my-zsh</h1><h2 id="两步急速安装"><a href="#两步急速安装" class="headerlink" title="两步急速安装"></a>两步急速安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install zsh<br><br><span class="hljs-comment"># 进入 zsh</span><br>zsh<br><br><span class="hljs-comment"># =========================================</span><br><span class="hljs-comment"># 安装 oh-my-zsh</span><br><span class="hljs-comment"># 推荐用这个</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl --insecure -fsSL https://gitee.com/shmhlsy/oh-my-zsh-install.sh/raw/master/install.sh)</span>&quot;</span><br><span class="hljs-comment"># 下面任选一</span><br><span class="hljs-comment"># 大概率配完会出bug</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh -O -)</span>&quot;</span><br><span class="hljs-comment"># 如果不行</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://gitee.com/unistd1999/oh-my-zsh/raw/master/tools/install.sh -O -)</span>&quot;</span><br><span class="hljs-comment"># 利用码云的安装方法</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget -O- https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)</span>&quot;</span><br><br><span class="hljs-comment"># =========================================</span><br><span class="hljs-comment"># 语法高亮</span><br><span class="hljs-built_in">sudo</span> apt install zsh-syntax-highlighting<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-comment"># 如果安装失败</span><br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source <span class="hljs-variable">$&#123;(q-)PWD&#125;</span>/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt; <span class="hljs-variable">$&#123;ZDOTDIR:-<span class="hljs-variable">$HOME</span>&#125;</span>/.zshrc<br><br><span class="hljs-comment"># =========================================</span><br><span class="hljs-comment"># 自动补全</span><br>git <span class="hljs-built_in">clone</span> https://gitee.com/mattuy/zsh-autosuggestions.git <span class="hljs-variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br><br><span class="hljs-comment"># =========================================</span><br><span class="hljs-comment"># 然后修改 ~/.zshrc</span><br>plugins=( <br>    <span class="hljs-comment"># other plugins...</span><br>    zsh-autosuggestions<br>)<br><br><span class="hljs-comment"># =========================================</span><br><span class="hljs-built_in">source</span> ~/.zshrc<br><br><span class="hljs-comment"># 设置默认</span><br>chsh -s `<span class="hljs-built_in">which</span> zsh`<br><br><span class="hljs-comment"># =========================================</span><br><span class="hljs-comment"># powerlevel10k</span><br>git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br><span class="hljs-comment"># or use gitee</span><br>git <span class="hljs-built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br><span class="hljs-comment"># then</span><br><span class="hljs-comment"># 1. Set `ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;` in `~/.zshrc`.</span><br><span class="hljs-built_in">sudo</span> vim ~/.zshrc<br>...<br><span class="hljs-comment"># 2. Restart Zsh with `exec zsh`.</span><br><span class="hljs-built_in">exec</span> zsh<br><span class="hljs-comment"># 3. Type `p10k configure` if the configuration wizard doesn&#x27;t start automatically.</span><br>p10k configure<br></code></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-下载zsh"><a href="#1-下载zsh" class="headerlink" title="1.下载zsh"></a>1.下载zsh</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install zsh<br></code></pre></td></tr></table></figure><h3 id="2-设置zsh"><a href="#2-设置zsh" class="headerlink" title="2. 设置zsh"></a>2. 设置zsh</h3><p>终端输入zsh进入zsh终端，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>国内版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh -O -)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>然后提示你的话你输入y就可以了，自动设置默认终端</p><blockquote><p> 如果没有自动设置，看 <a href="https://zhuanlan.zhihu.com/p/28042743">Ubuntu下zsh的安装与oh my zsh的配置 - 知乎 (zhihu.com)</a></p><p> 首先用vim打开这个文件（注意权限）</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># vim /etc/passwd<br></code></pre></td></tr></table></figure><blockquote><p>其中的内容格式大概是这样的</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>sync:x:4:65534:sync:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br></code></pre></td></tr></table></figure><blockquote><p>本例中我们要设置的用户为ubuntu，找到ubuntu用户对应的这一条，然后修改默认的shell由bash变为zsh</p><p>修改之后的条目</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/zsh<br></code></pre></td></tr></table></figure><blockquote><p>保存退出编辑器。下次登陆默认使用的shell就变成了zsh</p></blockquote><h3 id="语法高亮插件"><a href="#语法高亮插件" class="headerlink" title="语法高亮插件"></a>语法高亮插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install zsh-syntax-highlighting<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt; ~/.zshrc<br></code></pre></td></tr></table></figure><p><strong>这里如果提示权限不够</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> 777 ~/.zshrc<br></code></pre></td></tr></table></figure><h3 id="自动补全："><a href="#自动补全：" class="headerlink" title="自动补全："></a>自动补全：</h3><blockquote><p><a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md">zsh-autosuggestions&#x2F;INSTALL.md at master · zsh-users&#x2F;zsh-autosuggestions (github.com)</a></p></blockquote><ol><li>Clone this repository into <code>$ZSH_CUSTOM/plugins</code> (by default <code>~/.oh-my-zsh/custom/plugins</code>)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><p>国内：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/Coxhuang/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><ol start="2"><li>Add the plugin to the list of plugins for Oh My Zsh to load (inside <code>~/.zshrc</code>):</li></ol><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">plugins=( <br>    <span class="hljs-comment"># other plugins...</span><br>    zsh-autosuggestions<br>)<br></code></pre></td></tr></table></figure><ol start="3"><li>Start a new terminal session.</li></ol><h3 id="为Oh-my-zsh切换主题"><a href="#为Oh-my-zsh切换主题" class="headerlink" title="为Oh my zsh切换主题"></a>为Oh my zsh切换主题</h3><p>Oh my zsh自带了非常实用的主题特性，其自身也提供了诸多主题以供切换。</p><p>官方对主题的介绍以及已提交的主题列表在这里 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes">robbyrussell&#x2F;oh-my-zsh</a></p><p>这里以agnoster这个主题为例</p><p>因为zsh已自带此主题，主题文件已存在于<code>~/.oh_my_zsh/themes</code>文件夹下，故可直接使用。如果你需要安装其他并非自带的主题的话，请将主题文件拷贝至此文件夹</p><p>首先切换到当前账户主目录，编辑.zshrc文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">vim .zshrc<br></code></pre></td></tr></table></figure><p>找到<code>ZSH_THEME</code>这一项，将它的值改成<code>agnoster</code>即可完成对此主题的切换，其他主题如法炮制</p><p>编辑好之后保存退出。使用<code>source .zshrc</code>命令在zsh内手动加载新配置文件，可免去重新登陆才能看到预览的麻烦</p><h3 id="解决zsh下Home-End键（行首-行尾）键失效的问题"><a href="#解决zsh下Home-End键（行首-行尾）键失效的问题" class="headerlink" title="解决zsh下Home&#x2F;End键（行首&#x2F;行尾）键失效的问题"></a>解决zsh下Home&#x2F;End键（行首&#x2F;行尾）键失效的问题</h3><p>不是很清楚怎么造成的。。不过手动bind一下按键就可以了</p><p>以下代码添加进<code>.zshrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bindkey</span> <span class="hljs-string">&#x27;\e[1~&#x27;</span> beginning-of-line<br><span class="hljs-built_in">bindkey</span> <span class="hljs-string">&#x27;\e[4~&#x27;</span> end-of-line<br></code></pre></td></tr></table></figure><p>然后提示符下手动<code>source .zshrc</code></p><h2 id="zsh插件"><a href="#zsh插件" class="headerlink" title="zsh插件"></a>zsh插件</h2><blockquote><p><a href="https://www.jianshu.com/p/ba782b57ae96">Ubuntu | 安装oh-my-zsh - 简书 (jianshu.com)</a></p></blockquote><h3 id="安装incr自动补全插件推荐"><a href="#安装incr自动补全插件推荐" class="headerlink" title="安装incr自动补全插件推荐"></a>安装incr自动补全插件<code>推荐</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.oh-my-zsh/plugins/<br><span class="hljs-built_in">mkdir</span> incr &amp;&amp; <span class="hljs-built_in">cd</span> incr<br>wget http://mimosa-pudica.net/src/incr-0.2.zsh<br><br>vim ~/.zshrc<br>在文件内加入<br><span class="hljs-built_in">source</span> ~/.oh-my-zsh/plugins/incr/incr*.zsh<br>保存退出后运行<br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h3 id="直接用的插件"><a href="#直接用的插件" class="headerlink" title="直接用的插件"></a>直接用的插件</h3><p><code>vi ~/.zshrc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">plugins=(git extract z)<br></code></pre></td></tr></table></figure><p><code>source ~/.zshrc</code></p><ol><li>git</li></ol><p>默认开启的插件，提供了大量 git 的alias.</p><ol start="2"><li>extract</li></ol><p>功能强大的解压插件，所有类型的文件解压一个命令x全搞定，再也不需要去记tar后面到底是哪几个参数了.</p><ol start="3"><li>z</li></ol><p>强大的目录自动跳转命令，会记忆你曾经进入过的目录，用模糊匹配快速进入你想要的目录.</p><h3 id="安装autojump自动跳转插件"><a href="#安装autojump自动跳转插件" class="headerlink" title="安装autojump自动跳转插件"></a>安装autojump自动跳转插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install autojump`<br>vi ~/.zshrc<br>输入<br>. /usr/share/autojump/autojump.sh<br>保存退出<br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h3 id="安装zsh-autosuggestions语法历史记录插件"><a href="#安装zsh-autosuggestions语法历史记录插件" class="headerlink" title="安装zsh-autosuggestions语法历史记录插件"></a>安装zsh-autosuggestions语法历史记录插件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/zsh-users/</span>zsh-autosuggestions <span class="hljs-variable">$ZSH_CUSTOM</span><span class="hljs-regexp">/plugins/</span>zsh-autosuggestions<br><br>git clone https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/mattuy/</span>zsh-autosuggestions.git <span class="hljs-variable">$ZSH_CUSTOM</span><span class="hljs-regexp">/plugins/</span>zsh-autosuggestions<br></code></pre></td></tr></table></figure><p><code>vim ~/.zshrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">plugins=(zsh-autosuggestions)<br><br>最后一行：<br>source $ZSH_CUSTOM/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh<br></code></pre></td></tr></table></figure><h2 id="install-sh-可直接运行安装"><a href="#install-sh-可直接运行安装" class="headerlink" title="install.sh 可直接运行安装"></a>install.sh 可直接运行安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># This script should be run via curl:</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">or via wget:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget -qO- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">or via fetch:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># As an alternative, you can first download the install script and run it afterwards:</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  sh install.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># You can tweak the install behavior by setting variables when running the script. For</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">example, to change the path to the Oh My Zsh repository:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  ZSH=~/.zsh sh install.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Respects the following environment variables:</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  ZSH     - path to the Oh My Zsh repository folder (default: <span class="hljs-variable">$HOME</span>/.oh-my-zsh)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  REPO    - name of the GitHub repo to install from (default: ohmyzsh/ohmyzsh)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  REMOTE  - full remote URL of the git repo to install (default: GitHub via HTTPS)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  BRANCH  - branch to check out immediately after install (default: master)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Other options:</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  CHSH       - <span class="hljs-string">&#x27;no&#x27;</span> means the installer will not change the default shell (default: <span class="hljs-built_in">yes</span>)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  RUNZSH     - <span class="hljs-string">&#x27;no&#x27;</span> means the installer will not run zsh after the install (default: <span class="hljs-built_in">yes</span>)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  KEEP_ZSHRC - <span class="hljs-string">&#x27;yes&#x27;</span> means the installer will not replace an existing .zshrc (default: no)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># You can also pass some arguments to the install script to set some these options:</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  --skip-chsh: has the same behavior as setting CHSH to <span class="hljs-string">&#x27;no&#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  --unattended: sets both CHSH and RUNZSH to <span class="hljs-string">&#x27;no&#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  --keep-zshrc: sets KEEP_ZSHRC to <span class="hljs-string">&#x27;yes&#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">For example:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  sh install.sh --unattended</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">or:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span> <span class="hljs-string">&quot;&quot;</span> --unattended</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-built_in">set</span> -e</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Make sure important variables exist <span class="hljs-keyword">if</span> not already defined</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># $USER is defined by login(1) which is not always executed (e.g. containers)</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">POSIX: https://pubs.opengroup.org/onlinepubs/009695299/utilities/id.html</span><br>USER=$&#123;USER:-$(id -u -n)&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-variable">$HOME</span> is defined at the <span class="hljs-keyword">time</span> of login, but it could be <span class="hljs-built_in">unset</span>. If it is <span class="hljs-built_in">unset</span>,</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">a tilde by itself (~) will not be expanded to the current user<span class="hljs-string">&#x27;s home directory.</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">POSIX: https://pubs.opengroup.org/onlinepubs/009696899/basedefs/xbd_chap08.html#tag_08_03</span></span><br>HOME=&quot;$&#123;HOME:-$(getent passwd $USER 2&gt;/dev/null | cut -d: -f6)&#125;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">macOS does not have getent, but this works even if $HOME is unset</span></span><br>HOME=&quot;$&#123;HOME:-$(eval echo ~$USER)&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Track if $ZSH was provided</span></span><br>custom_zsh=$&#123;ZSH:+yes&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Default settings</span></span><br>ZSH=&quot;$&#123;ZSH:-$HOME/.oh-my-zsh&#125;&quot;<br>REPO=$&#123;REPO:-ohmyzsh/ohmyzsh&#125;<br>REMOTE=$&#123;REMOTE:-https://github.com/$&#123;REPO&#125;.git&#125;<br>BRANCH=$&#123;BRANCH:-master&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Other options</span></span><br>CHSH=$&#123;CHSH:-yes&#125;<br>RUNZSH=$&#123;RUNZSH:-yes&#125;<br>KEEP_ZSHRC=$&#123;KEEP_ZSHRC:-no&#125;<br><br><br>command_exists() &#123;<br>  command -v &quot;$@&quot; &gt;/dev/null 2&gt;&amp;1<br>&#125;<br><br>user_can_sudo() &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">Check if sudo is installed</span></span><br>  command_exists sudo || return 1<br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">The following command has 3 parts:</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-string"></span></span><br><span class="hljs-string"><span class="language-bash">  # 1. Run `sudo` with `-v`. Does the following:</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">   • with privilege: asks for a password immediately.</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">   • without privilege: exits with error code 1 and prints the message:</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">     Sorry, user &lt;username&gt; may not run sudo on &lt;hostname&gt;</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-string"></span></span><br><span class="hljs-string"><span class="language-bash">  # 2. Pass `-n` to `sudo` to tell it to not ask for a password. If the</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">   password is not required, the command will finish with exit code 0.</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">   If one is required, sudo will exit with error code 1 and print the</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">   message:</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">   sudo: a password is required</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-string"></span></span><br><span class="hljs-string"><span class="language-bash">  # 3. Check for the words &quot;may not run sudo&quot; in the output to really tell</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">   whether the user has privileges or not. For that we have to make sure</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">   to run `sudo` in the default locale (with `LANG=`) so that the message</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">   stays consistent regardless of the user&#x27;</span>s locale.</span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"></span><br><span class="language-bash">  ! LANG= <span class="hljs-built_in">sudo</span> -n -v 2&gt;&amp;1 | grep -q <span class="hljs-string">&quot;may not run sudo&quot;</span></span><br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">The [ -t 1 ] check only works when the <span class="hljs-keyword">function</span> is not called from</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">a subshell (like <span class="hljs-keyword">in</span> `$(...)` or `(...)`, so this hack redefines the</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">function</span> at the top level to always <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span> when stdout is not</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">a <span class="hljs-built_in">tty</span>.</span><br>if [ -t 1 ]; then<br>  is_tty() &#123;<br>    true<br>  &#125;<br>else<br>  is_tty() &#123;<br>    false<br>  &#125;<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">This <span class="hljs-keyword">function</span> uses the logic from supports-hyperlinks[1][2], <span class="hljs-built_in">which</span> is</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">made by Kat Marchán (@zkat) and licensed under the Apache License 2.0.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[1] https://github.com/zkat/supports-hyperlinks</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[2] https://crates.io/crates/supports-hyperlinks</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Copyright (c) 2021 Kat Marchán</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">you may not use this file except <span class="hljs-keyword">in</span> compliance with the License.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">You may obtain a copy of the License at</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">distributed under the License is distributed on an <span class="hljs-string">&quot;AS IS&quot;</span> BASIS,</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">See the License <span class="hljs-keyword">for</span> the specific language governing permissions and</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">limitations under the License.</span><br>supports_hyperlinks() &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-variable">$FORCE_HYPERLINK</span> must be <span class="hljs-built_in">set</span> and be non-zero (this acts as a logic bypass)</span><br>  if [ -n &quot;$FORCE_HYPERLINK&quot; ]; then<br>    [ &quot;$FORCE_HYPERLINK&quot; != 0 ]<br>    return $?<br>  fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">If stdout is not a <span class="hljs-built_in">tty</span>, it doesn<span class="hljs-string">&#x27;t support hyperlinks</span></span><br>  is_tty || return 1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">DomTerm terminal emulator (domterm.org)</span></span><br>  if [ -n &quot;$DOMTERM&quot; ]; then<br>    return 0<br>  fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">VTE-based terminals above v0.50 (Gnome Terminal, Guake, ROXTerm, etc)</span></span><br>  if [ -n &quot;$VTE_VERSION&quot; ]; then<br>    [ $VTE_VERSION -ge 5000 ]<br>    return $?<br>  fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">If $TERM_PROGRAM is set, these terminals support hyperlinks</span></span><br>  case &quot;$TERM_PROGRAM&quot; in<br>  Hyper|iTerm.app|terminology|WezTerm) return 0 ;;<br>  esac<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">kitty supports hyperlinks</span></span><br>  if [ &quot;$TERM&quot; = xterm-kitty ]; then<br>    return 0<br>  fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">Windows Terminal or Konsole also support hyperlinks</span></span><br>  if [ -n &quot;$WT_SESSION&quot; ] || [ -n &quot;$KONSOLE_VERSION&quot; ]; then<br>    return 0<br>  fi<br><br>  return 1<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Adapted from code and information by Anton Kochkov (@XVilka)</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Source: https://gist.github.com/XVilka/8346728</span></span><br>supports_truecolor() &#123;<br>  case &quot;$COLORTERM&quot; in<br>  truecolor|24bit) return 0 ;;<br>  esac<br><br>  case &quot;$TERM&quot; in<br>  iterm           |\<br>  tmux-truecolor  |\<br>  linux-truecolor |\<br>  xterm-truecolor |\<br>  screen-truecolor) return 0 ;;<br>  esac<br><br>  return 1<br>&#125;<br><br>fmt_link() &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">$1: text, $2: url, $3: fallback mode</span></span><br>  if supports_hyperlinks; then<br>    printf &#x27;\033]8;;%s\a%s\033]8;;\a\n&#x27; &quot;$2&quot; &quot;$1&quot;<br>    return<br>  fi<br><br>  case &quot;$3&quot; in<br>  --text) printf &#x27;%s\n&#x27; &quot;$1&quot; ;;<br>  --url|*) fmt_underline &quot;$2&quot; ;;<br>  esac<br>&#125;<br><br>fmt_underline() &#123;<br>  is_tty &amp;&amp; printf &#x27;\033[4m%s\033[24m\n&#x27; &quot;$*&quot; || printf &#x27;%s\n&#x27; &quot;$*&quot;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">shellcheck disable=SC2016 # backtick in single-quote</span></span><br>fmt_code() &#123;<br>  is_tty &amp;&amp; printf &#x27;`\033[2m%s\033[22m`\n&#x27; &quot;$*&quot; || printf &#x27;`%s`\n&#x27; &quot;$*&quot;<br>&#125;<br><br>fmt_error() &#123;<br>  printf &#x27;%sError: %s%s\n&#x27; &quot;$&#123;FMT_BOLD&#125;$&#123;FMT_RED&#125;&quot; &quot;$*&quot; &quot;$FMT_RESET&quot; &gt;&amp;2<br>&#125;<br><br>setup_color() &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">Only use colors if connected to a terminal</span></span><br>  if ! is_tty; then<br>    FMT_RAINBOW=&quot;&quot;<br>    FMT_RED=&quot;&quot;<br>    FMT_GREEN=&quot;&quot;<br>    FMT_YELLOW=&quot;&quot;<br>    FMT_BLUE=&quot;&quot;<br>    FMT_BOLD=&quot;&quot;<br>    FMT_RESET=&quot;&quot;<br>    return<br>  fi<br><br>  if supports_truecolor; then<br>    FMT_RAINBOW=&quot;<br>      $(printf &#x27;\033[38;2;255;0;0m&#x27;)<br>      $(printf &#x27;\033[38;2;255;97;0m&#x27;)<br>      $(printf &#x27;\033[38;2;247;255;0m&#x27;)<br>      $(printf &#x27;\033[38;2;0;255;30m&#x27;)<br>      $(printf &#x27;\033[38;2;77;0;255m&#x27;)<br>      $(printf &#x27;\033[38;2;168;0;255m&#x27;)<br>      $(printf &#x27;\033[38;2;245;0;172m&#x27;)<br>    &quot;<br>  else<br>    FMT_RAINBOW=&quot;<br>      $(printf &#x27;\033[38;5;196m&#x27;)<br>      $(printf &#x27;\033[38;5;202m&#x27;)<br>      $(printf &#x27;\033[38;5;226m&#x27;)<br>      $(printf &#x27;\033[38;5;082m&#x27;)<br>      $(printf &#x27;\033[38;5;021m&#x27;)<br>      $(printf &#x27;\033[38;5;093m&#x27;)<br>      $(printf &#x27;\033[38;5;163m&#x27;)<br>    &quot;<br>  fi<br><br>  FMT_RED=$(printf &#x27;\033[31m&#x27;)<br>  FMT_GREEN=$(printf &#x27;\033[32m&#x27;)<br>  FMT_YELLOW=$(printf &#x27;\033[33m&#x27;)<br>  FMT_BLUE=$(printf &#x27;\033[34m&#x27;)<br>  FMT_BOLD=$(printf &#x27;\033[1m&#x27;)<br>  FMT_RESET=$(printf &#x27;\033[0m&#x27;)<br>&#125;<br><br>setup_ohmyzsh() &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">Prevent the cloned repository from having insecure permissions. Failing to do</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">so causes compinit() calls to fail with &quot;command not found: compdef&quot; errors</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">for users with insecure umasks (e.g., &quot;002&quot;, allowing group writability). Note</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">that this will be ignored under Cygwin by default, as Windows ACLs take</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">precedence over umasks except for filesystems mounted with option &quot;noacl&quot;.</span></span><br>  umask g-w,o-w<br><br>  echo &quot;$&#123;FMT_BLUE&#125;Cloning Oh My Zsh...$&#123;FMT_RESET&#125;&quot;<br><br>  command_exists git || &#123;<br>    fmt_error &quot;git is not installed&quot;<br>    exit 1<br>  &#125;<br><br>  ostype=$(uname)<br>  if [ -z &quot;$&#123;ostype%CYGWIN*&#125;&quot; ] &amp;&amp; git --version | grep -q msysgit; then<br>    fmt_error &quot;Windows/MSYS Git is not supported on Cygwin&quot;<br>    fmt_error &quot;Make sure the Cygwin git package is installed and is first on the \$PATH&quot;<br>    exit 1<br>  fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">Manual clone with git config options to support git &lt; v1.7.2</span></span><br>  git init --quiet &quot;$ZSH&quot; &amp;&amp; cd &quot;$ZSH&quot; \<br>  &amp;&amp; git config core.eol lf \<br>  &amp;&amp; git config core.autocrlf false \<br>  &amp;&amp; git config fsck.zeroPaddedFilemode ignore \<br>  &amp;&amp; git config fetch.fsck.zeroPaddedFilemode ignore \<br>  &amp;&amp; git config receive.fsck.zeroPaddedFilemode ignore \<br>  &amp;&amp; git config oh-my-zsh.remote origin \<br>  &amp;&amp; git config oh-my-zsh.branch &quot;$BRANCH&quot; \<br>  &amp;&amp; git remote add origin &quot;$REMOTE&quot; \<br>  &amp;&amp; git fetch --depth=1 origin \<br>  &amp;&amp; git checkout -b &quot;$BRANCH&quot; &quot;origin/$BRANCH&quot; || &#123;<br>    [ ! -d &quot;$ZSH&quot; ] || &#123;<br>      cd -<br>      rm -rf &quot;$ZSH&quot; 2&gt;/dev/null<br>    &#125;<br>    fmt_error &quot;git clone of oh-my-zsh repo failed&quot;<br>    exit 1<br>  &#125;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">Exit installation directory</span></span><br>  cd -<br><br>  echo<br>&#125;<br><br>setup_zshrc() &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">Keep most recent old .zshrc at .zshrc.pre-oh-my-zsh, and older ones</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">with datestamp of installation that moved them aside, so we never actually</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">destroy a user&#x27;</span>s original zshrc</span><br>  echo &quot;$&#123;FMT_BLUE&#125;Looking for an existing zsh config...$&#123;FMT_RESET&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Must use this exact name so uninstall.sh can find it</span><br>  OLD_ZSHRC=~/.zshrc.pre-oh-my-zsh<br>  if [ -f ~/.zshrc ] || [ -h ~/.zshrc ]; then<br>    # Skip this if the user doesn&#x27;t want to replace an existing .zshrc<br>    if [ &quot;$KEEP_ZSHRC&quot; = yes ]; then<br>      echo &quot;$&#123;FMT_YELLOW&#125;Found ~/.zshrc.$&#123;FMT_RESET&#125; $&#123;FMT_GREEN&#125;Keeping...$&#123;FMT_RESET&#125;&quot;<br>      return<br>    fi<br>    if [ -e &quot;$OLD_ZSHRC&quot; ]; then<br>      OLD_OLD_ZSHRC=&quot;$&#123;OLD_ZSHRC&#125;-$(date +%Y-%m-%d_%H-%M-%S)&quot;<br>      if [ -e &quot;$OLD_OLD_ZSHRC&quot; ]; then<br>        fmt_error &quot;$OLD_OLD_ZSHRC exists. Can&#x27;t back up $&#123;OLD_ZSHRC&#125;&quot;<br>        fmt_error &quot;re-run the installer again in a couple of seconds&quot;<br>        exit 1<br>      fi<br>      mv &quot;$OLD_ZSHRC&quot; &quot;$&#123;OLD_OLD_ZSHRC&#125;&quot;<br><br>      echo &quot;$&#123;FMT_YELLOW&#125;Found old ~/.zshrc.pre-oh-my-zsh.&quot; \<br>        &quot;$&#123;FMT_GREEN&#125;Backing up to $&#123;OLD_OLD_ZSHRC&#125;$&#123;FMT_RESET&#125;&quot;<br>    fi<br>    echo &quot;$&#123;FMT_YELLOW&#125;Found ~/.zshrc.$&#123;FMT_RESET&#125; $&#123;FMT_GREEN&#125;Backing up to $&#123;OLD_ZSHRC&#125;$&#123;FMT_RESET&#125;&quot;<br>    mv ~/.zshrc &quot;$OLD_ZSHRC&quot;<br>  fi<br><br>  echo &quot;$&#123;FMT_GREEN&#125;Using the Oh My Zsh template file and adding it to ~/.zshrc.$&#123;FMT_RESET&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Replace <span class="hljs-variable">$HOME</span> path with <span class="hljs-string">&#x27;$HOME&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$ZSH</span> variable <span class="hljs-keyword">in</span> .zshrc file</span><br>  omz=$(echo &quot;$ZSH&quot; | sed &quot;s|^$HOME/|\$HOME/|&quot;)<br>  sed &quot;s|^export ZSH=.*$|export ZSH=\&quot;$&#123;omz&#125;\&quot;|&quot; &quot;$ZSH/templates/zshrc.zsh-template&quot; &gt; ~/.zshrc-omztemp<br>  mv -f ~/.zshrc-omztemp ~/.zshrc<br><br>  echo<br>&#125;<br><br>setup_shell() &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Skip setup <span class="hljs-keyword">if</span> the user wants or stdin is closed (not running interactively).</span><br>  if [ &quot;$CHSH&quot; = no ]; then<br>    return<br>  fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">If this user<span class="hljs-string">&#x27;s login shell is already &quot;zsh&quot;, do not attempt to switch.</span></span><br>  if [ &quot;$(basename -- &quot;$SHELL&quot;)&quot; = &quot;zsh&quot; ]; then<br>    return<br>  fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">If this platform doesn&#x27;</span>t provide a <span class="hljs-string">&quot;chsh&quot;</span> <span class="hljs-built_in">command</span>, bail out.</span><br>  if ! command_exists chsh; then<br>    cat &lt;&lt;EOF<br>I can&#x27;t change your shell automatically because this system does not have chsh.<br><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;FMT_BLUE&#125;Please manually change your default shell to zsh<span class="hljs-variable">$&#123;FMT_RESET&#125;</span></span><br>EOF<br>    return<br>  fi<br><br>  echo &quot;$&#123;FMT_BLUE&#125;Time to change your default shell to zsh:$&#123;FMT_RESET&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Prompt <span class="hljs-keyword">for</span> user choice on changing the default login shell</span><br>  printf &#x27;%sDo you want to change your default shell to zsh? [Y/n]%s &#x27; \<br>    &quot;$FMT_YELLOW&quot; &quot;$FMT_RESET&quot;<br>  read -r opt<br>  case $opt in<br>    y*|Y*|&quot;&quot;) ;;<br>    n*|N*) echo &quot;Shell change skipped.&quot;; return ;;<br>    *) echo &quot;Invalid choice. Shell change skipped.&quot;; return ;;<br>  esac<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Check <span class="hljs-keyword">if</span> we<span class="hljs-string">&#x27;re running on Termux</span></span><br>  case &quot;$PREFIX&quot; in<br>    *com.termux*) termux=true; zsh=zsh ;;<br>    *) termux=false ;;<br>  esac<br><br>  if [ &quot;$termux&quot; != true ]; then<br>    # Test for the right location of the &quot;shells&quot; file<br>    if [ -f /etc/shells ]; then<br>      shells_file=/etc/shells<br>    elif [ -f /usr/share/defaults/etc/shells ]; then # Solus OS<br>      shells_file=/usr/share/defaults/etc/shells<br>    else<br>      fmt_error &quot;could not find /etc/shells file. Change your default shell manually.&quot;<br>      return<br>    fi<br><br>    # Get the path to the right zsh binary<br>    # 1. Use the most preceding one based on $PATH, then check that it&#x27;s in the shells file<br>    # 2. If that fails, get a zsh path from the shells file, then check it actually exists<br>    if ! zsh=$(command -v zsh) || ! grep -qx &quot;$zsh&quot; &quot;$shells_file&quot;; then<br>      if ! zsh=$(grep &#x27;^/.*/zsh$&#x27; &quot;$shells_file&quot; | tail -n 1) || [ ! -f &quot;$zsh&quot; ]; then<br>        fmt_error &quot;no zsh binary found or not present in &#x27;$shells_file&#x27;&quot;<br>        fmt_error &quot;change your default shell manually.&quot;<br>        return<br>      fi<br>    fi<br>  fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">We&#x27;</span>re going to change the default shell, so back up the current one</span><br>  if [ -n &quot;$SHELL&quot; ]; then<br>    echo &quot;$SHELL&quot; &gt; ~/.shell.pre-oh-my-zsh<br>  else<br>    grep &quot;^$USER:&quot; /etc/passwd | awk -F: &#x27;&#123;print $7&#125;&#x27; &gt; ~/.shell.pre-oh-my-zsh<br>  fi<br><br>  echo &quot;Changing your shell to $zsh...&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Check <span class="hljs-keyword">if</span> user has <span class="hljs-built_in">sudo</span> privileges to run `chsh` with or without `<span class="hljs-built_in">sudo</span>`</span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"></span><br><span class="language-bash">  <span class="hljs-comment"># This allows the call to succeed without password on systems where the</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">user does not have a password but does have <span class="hljs-built_in">sudo</span> privileges, like <span class="hljs-keyword">in</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">Google Cloud Shell.</span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"></span><br><span class="language-bash">  <span class="hljs-comment"># On systems that don&#x27;t have a user with passwordless sudo, the user will</span></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">be prompted <span class="hljs-keyword">for</span> the password either way, so this shouldn<span class="hljs-string">&#x27;t cause any issues.</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash"><span class="hljs-string"></span></span><br><span class="hljs-string"><span class="language-bash">  if user_can_sudo; then</span></span><br>    sudo -k chsh -s &quot;$zsh&quot; &quot;$USER&quot;  # -k forces the password prompt<br>  else<br>    chsh -s &quot;$zsh&quot; &quot;$USER&quot;          # run chsh normally<br>  fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">Check if the shell change was successful</span></span><br>  if [ $? -ne 0 ]; then<br>    fmt_error &quot;chsh command unsuccessful. Change your default shell manually.&quot;<br>  else<br>    export SHELL=&quot;$zsh&quot;<br>    echo &quot;$&#123;FMT_GREEN&#125;Shell successfully changed to &#x27;$zsh&#x27;.$&#123;FMT_RESET&#125;&quot;<br>  fi<br><br>  echo<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">shellcheck disable=SC2183  # printf string has more %s than arguments ($FMT_RAINBOW expands to multiple arguments)</span></span><br>print_success() &#123;<br>  printf &#x27;%s         %s__      %s           %s        %s       %s     %s__   %s\n&#x27;      $FMT_RAINBOW $FMT_RESET<br>  printf &#x27;%s  ____  %s/ /_    %s ____ ___  %s__  __  %s ____  %s_____%s/ /_  %s\n&#x27;      $FMT_RAINBOW $FMT_RESET<br>  printf &#x27;%s / __ \\%s/ __ \\  %s / __ `__ \\%s/ / / / %s /_  / %s/ ___/%s __ \\ %s\n&#x27;  $FMT_RAINBOW $FMT_RESET<br>  printf &#x27;%s/ /_/ /%s / / / %s / / / / / /%s /_/ / %s   / /_%s(__  )%s / / / %s\n&#x27;      $FMT_RAINBOW $FMT_RESET<br>  printf &#x27;%s\\____/%s_/ /_/ %s /_/ /_/ /_/%s\\__, / %s   /___/%s____/%s_/ /_/  %s\n&#x27;    $FMT_RAINBOW $FMT_RESET<br>  printf &#x27;%s    %s        %s           %s /____/ %s       %s     %s          %s....is now installed!%s\n&#x27; $FMT_RAINBOW $FMT_GREEN $FMT_RESET<br>  printf &#x27;\n&#x27;<br>  printf &#x27;\n&#x27;<br>  printf &quot;%s %s %s\n&quot; &quot;Before you scream $&#123;FMT_BOLD&#125;$&#123;FMT_YELLOW&#125;Oh My Zsh!$&#123;FMT_RESET&#125; look over the&quot; \<br>    &quot;$(fmt_code &quot;$(fmt_link &quot;.zshrc&quot; &quot;file://$HOME/.zshrc&quot; --text)&quot;)&quot; \<br>    &quot;file to select plugins, themes, and options.&quot;<br>  printf &#x27;\n&#x27;<br>  printf &#x27;%s\n&#x27; &quot;• Follow us on Twitter: $(fmt_link @ohmyzsh https://twitter.com/ohmyzsh)&quot;<br>  printf &#x27;%s\n&#x27; &quot;• Join our Discord community: $(fmt_link &quot;Discord server&quot; https://discord.gg/ohmyzsh)&quot;<br>  printf &#x27;%s\n&#x27; &quot;• Get stickers, t-shirts, coffee mugs and more: $(fmt_link &quot;Planet Argon Shop&quot; https://shop.planetargon.com/collections/oh-my-zsh)&quot;<br>  printf &#x27;%s\n&#x27; $FMT_RESET<br>&#125;<br><br>main() &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">Run as unattended if stdin is not a tty</span></span><br>  if [ ! -t 0 ]; then<br>    RUNZSH=no<br>    CHSH=no<br>  fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash"><span class="hljs-string">Parse arguments</span></span><br>  while [ $# -gt 0 ]; do<br>    case $1 in<br>      --unattended) RUNZSH=no; CHSH=no ;;<br>      --skip-chsh) CHSH=no ;;<br>      --keep-zshrc) KEEP_ZSHRC=yes ;;<br>    esac<br>    shift<br>  done<br><br>  setup_color<br><br>  if ! command_exists zsh; then<br>    echo &quot;$&#123;FMT_YELLOW&#125;Zsh is not installed.$&#123;FMT_RESET&#125; Please install zsh first.&quot;<br>    exit 1<br>  fi<br><br>  if [ -d &quot;$ZSH&quot; ]; then<br>    echo &quot;$&#123;FMT_YELLOW&#125;The \$ZSH folder already exists ($ZSH).$&#123;FMT_RESET&#125;&quot;<br>    if [ &quot;$custom_zsh&quot; = yes ]; then<br>      cat &lt;&lt;EOF<br><br>You ran the installer with the \$ZSH setting or the \$ZSH variable is<br>exported. You have 3 options:<br><br>1. Unset the ZSH variable when calling the installer:<br><span class="hljs-meta prompt_">   $</span><span class="language-bash"><span class="hljs-string">(fmt_code &quot;ZSH= sh install.sh&quot;)</span></span><br>2. Install Oh My Zsh to a directory that doesn&#x27;t exist yet:<br><span class="hljs-meta prompt_">   $</span><span class="language-bash"><span class="hljs-string">(fmt_code &quot;ZSH=path/to/new/ohmyzsh/folder sh install.sh&quot;)</span></span><br>3. (Caution) If the folder doesn&#x27;t contain important information,<br>   you can just remove it with $(fmt_code &quot;rm -r $ZSH&quot;)<br><br>EOF<br>    else<br>      echo &quot;You&#x27;ll need to remove it if you want to reinstall.&quot;<br>    fi<br>    exit 1<br>  fi<br><br>  setup_ohmyzsh<br>  setup_zshrc<br>  setup_shell<br><br>  print_success<br><br>  if [ $RUNZSH = no ]; then<br>    echo &quot;$&#123;FMT_YELLOW&#125;Run zsh to try it out.$&#123;FMT_RESET&#125;&quot;<br>    exit<br>  fi<br><br>  exec zsh -l<br>&#125;<br><br>main &quot;$@&quot;<br></code></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p><code>omz update</code></p><h2 id="powerlevel10k主题"><a href="#powerlevel10k主题" class="headerlink" title="powerlevel10k主题"></a>powerlevel10k主题</h2><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><ol><li><a href="https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k">Install the recommended font</a>. <em>Optional but highly recommended.</em></li><li><a href="https://github.com/romkatv/powerlevel10k#installation">Install Powerlevel10k</a> itself.</li><li>Restart Zsh with <code>exec zsh</code>.</li><li>Type <code>p10k configure</code> if the configuration wizard doesn’t start automatically.</li></ol><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><ol><li><p>Clone the repository:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br></code></pre></td></tr></table></figure><p>Users in China can use the official mirror on gitee.com for faster download.<br>中国用户可以使用 gitee.com 上的官方镜像加速下载.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br></code></pre></td></tr></table></figure></li><li><p>Set <code>ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</code> in <code>~/.zshrc</code>.</p></li><li><p>Restart Zsh with <code>exec zsh</code>.</p></li><li><p>Type <code>p10k configure</code> if the configuration wizard doesn’t start automatically.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>zsh</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blazor 配合 sweet alert 实现弹窗询问确认</title>
    <link href="/2025/01/23/blazor-confirm-popup/"/>
    <url>/2025/01/23/blazor-confirm-popup/</url>
    
    <content type="html"><![CDATA[<h1 id="blazor-配合-sweet-alert-实现弹窗询问确认"><a href="#blazor-配合-sweet-alert-实现弹窗询问确认" class="headerlink" title="blazor 配合 sweet alert 实现弹窗询问确认"></a>blazor 配合 sweet alert 实现弹窗询问确认</h1><p>使用JavaScript互操作（JS Interop）来调用JavaScript代码，并且可以在JavaScript弹窗确认后回调到Blazor的C#代码。</p><h2 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">showConfirmDialog</span> = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">title, text, confirmButtonText, cancelButtonText</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">value</span>: confirmed &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;<br>        <span class="hljs-attr">title</span>: title,<br>        <span class="hljs-attr">text</span>: text,<br>        <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;question&#x27;</span>,<br>        <span class="hljs-attr">showCancelButton</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">confirmButtonText</span>: confirmButtonText,<br>        <span class="hljs-attr">cancelButtonText</span>: cancelButtonText<br>    &#125;);<br>    <span class="hljs-keyword">return</span> confirmed ?? <span class="hljs-literal">false</span>; <span class="hljs-comment">// 注意：不要返回除了布尔值以外的值</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>window.showConfirmDialog</code> 必须返回一个明确的<strong>布尔值</strong>，不可以是 <code>null</code>, <code>undefined</code></p><h2 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@page <span class="hljs-string">&quot;/example&quot;</span><br>@inject IJSRuntime JS<br><br>&lt;button @onclick=<span class="hljs-string">&quot;OnButtonClick&quot;</span>&gt;Click Me&lt;/button&gt;<br><br>@code &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">OnButtonClick</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 调用JavaScript函数并等待结果</span><br>        <span class="hljs-built_in">bool</span>? confirmed = <span class="hljs-keyword">await</span> JS.InvokeAsync&lt;<span class="hljs-built_in">bool</span>?&gt;(<span class="hljs-string">&quot;showConfirmDialog&quot;</span>, <br>            <span class="hljs-string">&quot;Are you sure?&quot;</span>, <br>            <span class="hljs-string">&quot;Do you want to proceed?&quot;</span>, <br>            <span class="hljs-string">&quot;Yes&quot;</span>, <br>            <span class="hljs-string">&quot;No&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (confirmed == <span class="hljs-literal">true</span>)<br>        &#123;<br>            <span class="hljs-comment">// 用户点击了确认，现在可以调用后台逻辑</span><br>            <span class="hljs-keyword">await</span> ConfirmAction();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// 用户点击了取消或其他情况</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">ConfirmAction</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 这里是当用户确认后的逻辑</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>asp.net</tag>
      
      <tag>blazor</tag>
      
      <tag>web</tag>
      
      <tag>sweetalert</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blazor 前端下载文件</title>
    <link href="/2025/01/22/blazor-download-file/"/>
    <url>/2025/01/22/blazor-download-file/</url>
    
    <content type="html"><![CDATA[<h1 id="如何在-Blazor-应用中下载文件"><a href="#如何在-Blazor-应用中下载文件" class="headerlink" title="如何在 Blazor 应用中下载文件"></a>如何在 Blazor 应用中下载文件</h1><p>此处下载指的是 Blazor 全栈项目内，客户端网页如何向后端请求文件并下载。</p><h2 id="1-注入-JS-互操作"><a href="#1-注入-JS-互操作" class="headerlink" title="1. 注入 JS 互操作"></a>1. 注入 JS 互操作</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@inject IJSRuntime jsRuntime<br></code></pre></td></tr></table></figure><h2 id="2-在-html-部分添加脚本"><a href="#2-在-html-部分添加脚本" class="headerlink" title="2. 在 html 部分添加脚本"></a>2. 在 html 部分添加脚本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;mx-auto status-panel &quot;</span>&gt;<br>    @<span class="hljs-title function_">foreach</span> (<span class="hljs-keyword">var</span> file <span class="hljs-keyword">in</span> downloadedFiles)<br>    &#123;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;apk-file&quot;</span> @<span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;() =&gt; TransmitCachedApk(file)&quot;</span>&gt;</span>@file<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">downloadFileFromStream</span> = <span class="hljs-title function_">async</span> (fileName, contentStreamReference) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Downloading file: &quot;</span> + fileName);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> arrayBuffer = <span class="hljs-keyword">await</span> contentStreamReference.<span class="hljs-title function_">arrayBuffer</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([arrayBuffer]);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> url = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> anchorElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        anchorElement.<span class="hljs-property">href</span> = url;</span></span><br><span class="language-javascript"><span class="language-xml">        anchorElement.<span class="hljs-property">download</span> = fileName ?? <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        anchorElement.<span class="hljs-title function_">click</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        anchorElement.<span class="hljs-title function_">remove</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(url);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="3-使用-JS-互操作"><a href="#3-使用-JS-互操作" class="headerlink" title="3. 使用 JS 互操作"></a>3. 使用 JS 互操作</h2><p>注意：当直接返回一个物理文件的 stream 时，需要使用 <code>File.OpenRead</code>，并用 <code>DotNetStreamReference</code> 处理一次。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#">@code &#123;<br>    <span class="hljs-keyword">private</span> List&lt;<span class="hljs-built_in">string</span>&gt; downloadedFiles = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br>    <br>    <span class="hljs-comment">// send cached apk to client</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">TransmitCachedApk</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> filename</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// run download in javascript</span><br>        <span class="hljs-keyword">await</span> DownloadApk(filename);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">DownloadApk</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> apk</span>)</span><br>    &#123;<br>        Log.Information(<span class="hljs-string">&quot;Transmitting cached apk &#123;apk&#125;&quot;</span>, apk);<br>        <span class="hljs-keyword">var</span> fileStream = File.OpenRead(<span class="hljs-string">$&quot;apk/<span class="hljs-subst">&#123;apk&#125;</span>&quot;</span>);<br>        <br>        <span class="hljs-keyword">using</span> <span class="hljs-keyword">var</span> streamRef = <span class="hljs-keyword">new</span> DotNetStreamReference(stream: fileStream);<br>        <br>        <span class="hljs-keyword">await</span> jsRuntime.InvokeVoidAsync(<span class="hljs-string">&quot;downloadFileFromStream&quot;</span>, apk, streamRef);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>见微软文档 <a href="https://learn.microsoft.com/zh-cn/aspnet/core/blazor/file-downloads?view=aspnetcore-9.0">ASP.NET Core Blazor 文件下载 | Microsoft Learn</a></p><blockquote><p>对于必须返回物理文件的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.stream">Stream</a> 的服务器侧应用中的组件，组件可以调用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file.openread">File.OpenRead</a></p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> Stream <span class="hljs-title">GetFileStream</span>()</span> =&gt; File.OpenRead(<span class="hljs-string">@&quot;&#123;PATH&#125;&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">DownloadFileFromStream</span>()</span><br>&#123;<br>    <span class="hljs-keyword">var</span> fileStream = GetFileStream();<br>    <span class="hljs-keyword">var</span> fileName = <span class="hljs-string">&quot;log.bin&quot;</span>;<br><br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">var</span> streamRef = <span class="hljs-keyword">new</span> DotNetStreamReference(stream: fileStream);<br><br>    <span class="hljs-keyword">await</span> JS.InvokeVoidAsync(<span class="hljs-string">&quot;downloadFileFromStream&quot;</span>, fileName, streamRef);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>csharp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csharp</tag>
      
      <tag>asp.net</tag>
      
      <tag>web</tag>
      
      <tag>balzor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>置顶</title>
    <link href="/2025/01/21/top/"/>
    <url>/2025/01/21/top/</url>
    
    <content type="html"><![CDATA[<h1 id="✨欢迎来到我的博客✨"><a href="#✨欢迎来到我的博客✨" class="headerlink" title="✨欢迎来到我的博客✨"></a>✨欢迎来到我的博客✨</h1><p>此博客使用 Hexo 搭建，并使用 Github Pages 进行部署，通过 Algolia 完成搜索。此博客同时还部署到了 netlify 上面以加快国内访问速度。</p><p>博客主要记录：</p><ul><li>代码开发日常</li><li>Windows&#x2F;Linux 系统配置</li><li>各类计算机文章</li></ul><p>你可以点击左上角<strong><a href="/archives/">归档</a></strong>查看所有发过的文章，或者点击<strong><a href="/tags/">标签</a></strong>，<strong><a href="/categories/">分类</a></strong>查看各个专题。</p><p>如果域名是 <a href="https://taylorblog.netlify.app/">https://taylorblog.netlify.app/</a> 那么是 netlify 上面部署的。</p><p>如果域名是 <a href="https://taylorandtony.github.io/">https://taylorandtony.github.io/</a> 那么是 Github Pages 的原页面。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo 搭建的坑</title>
    <link href="/2025/01/21/hexo-%E6%90%AD%E5%BB%BA%E7%9A%84%E5%9D%91/"/>
    <url>/2025/01/21/hexo-%E6%90%AD%E5%BB%BA%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-搭建过程踩坑"><a href="#hexo-搭建过程踩坑" class="headerlink" title="hexo 搭建过程踩坑"></a>hexo 搭建过程踩坑</h1><h2 id="页面没有-css-样式"><a href="#页面没有-css-样式" class="headerlink" title="页面没有 css 样式"></a>页面没有 css 样式</h2><p>复现：按照官网给出的快速开始，依次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br>hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br>hexo server<br></code></pre></td></tr></table></figure><p>即可稳定复现，打开的页面没有 css 样式，全是默认 html 元素的样子。</p><p>尝试以下方案均无效：</p><ul><li>删除 node_modules 文件夹，重新 npm install</li><li>更新 hexo-cli</li><li>删除整个项目，重新 hexo init</li></ul><p>解决：<strong>项目目录的路径出现了 # 符号，更改其他路径即可。问题非常隐蔽，翻的 github issues 最后有一条提到了</strong></p><h2 id="安装主题后无法显示-tags-和分类"><a href="#安装主题后无法显示-tags-和分类" class="headerlink" title="安装主题后无法显示 tags 和分类"></a>安装主题后无法显示 tags 和分类</h2><ul><li>新建一个标签页面  <code>hexo new page tags</code></li><li>source 文件夹下有了 tags\index.md 打开 index.md</li><li>修改 index.md 文件</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: &quot;tags&quot;<br><span class="hljs-section">type: tags</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><ul><li>新建一个分类页面  <code>hexo new page categories</code></li><li>source 文件夹下有了 categories\index.md 打开 index.md</li><li>修改 index.md 文件</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: &quot;categories&quot;<br><span class="hljs-section">type: categories</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p>按照文档打开 <code>post_asset_folder</code> 后，所有的图片链接都会被加上 <code>/.com/</code> 的前缀，形成类似 <code>/.com//test.jpg</code> 这样的链接，直到目前无法定位问题，顾关闭 <code>post_asset_folder</code>，手动管理图片。</p><p>按照文档使用 <code>&#123;% asset_img path.jpg %&#125;</code> 后，无效，此图片不会被显示，也不出现图片错误的图标。</p><p>解决方案：</p><p>在 <code>source</code> 文件夹下新建一个文件夹 <code>images</code>，将图片放入文件夹内，在 <code>post</code> 文件夹下新建一个图片的 md 文件，将图片的链接改为 <code>/images/test.jpg</code>，即可正常显示图片。</p><p><code>images</code> 目录可以嵌套，规则和静态文件托管一致。</p><h2 id="deploy-时出现-error-RPC-failed；-HTTP-400-curl-56"><a href="#deploy-时出现-error-RPC-failed；-HTTP-400-curl-56" class="headerlink" title="deploy 时出现 error: RPC failed； HTTP 400 curl 56"></a>deploy 时出现 error: RPC failed； HTTP 400 curl 56</h2><p>设置 git 的缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.postBuffer 524288000<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2025/01/21/%E6%B5%8B%E8%AF%95/"/>
    <url>/2025/01/21/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h1><p>nohup（no hang up）,意思就是不挂断运行，用nohup运行命令可以使命令永久执行下去，和用户终端没有关系，断开SSH不影响运行，nohup捕获了SIGHUP，并做了忽略处理，因此当屏幕关闭，断网等造成ssh中断时进程不会退出。但是ctrl+c可以关闭关闭该进程。因此大多数情况同时使用nohup和&amp;启动的程序，ctrl+c和关闭终端都无法关闭。在缺省情况下所有输出都被重定向到一个名为nohup.out的文件中。</p><p><img src="/images/shared/hutao.jpg" alt="test image"></p><p>nohup指令基本使用格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> Command [ Arg ... ] [　&amp; ]<br></code></pre></td></tr></table></figure><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>后台不中断执行.&#x2F;test.sh,stdout输出给out.log，stderr输出给err.log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> ./test.sh &gt; out.log 2&gt;err.log  &amp;<br></code></pre></td></tr></table></figure><p>相关的数字含义如下：</p><ul><li>0 – stdin (standard input)</li><li>1 – stdout (standard output),显然 nohup command &gt; out.log 等价于 nohup command 1&gt; out.log，是缺省行为。</li><li>2 – stderr (standard error)</li></ul><p>可能你也会见到这种写法，其含义是把stderr也重定向给stdin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> ./test.sh &gt; out.log 2&gt;&amp;1  &amp;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这是一个注释部分</p><p>这是第二行</p></blockquote><p>列表：</p><ul><li>列表1</li><li>列表2</li><li>列表3</li></ul><p>有序列表：</p><ol><li>列表1</li><li>列表2</li><li>列表3</li></ol><p>链接：<a href="https://www.github.com/">链接</a></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/21/hello-world/"/>
    <url>/2025/01/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
